/*
    Videos Component.

    This is a Redux-managed React component that renders a table of code samples from
    GitHub Api. It displays repositories with metadata such as
    engagement metrics, last commit date, languages used, and categories.
 */
import React, { useState } from 'react'
import PropTypes from 'prop-types'
import { useSelector } from 'react-redux'
import { categoryIcon, categoryLabel, ContentCategories } from '../Component'
import Loading from '../../Loading'

import './styles.css'

// Used to validate the structure of the public/data/youtube.json data for each
// YouTube video in the Redux store, which itself is generated by the
// shared/fetchers/youtubeFetcher.js script which is run weekly on a cron schedule by
// Github Actions and included in the react build so that it can be locally served to Redux.
const videoStateShape = PropTypes.shape({
  id: PropTypes.string.isRequired,
  title: PropTypes.string.isRequired,
  description: PropTypes.string.isRequired,
  publishedAt: PropTypes.string.isRequired,
  thumbnails: PropTypes.shape({
    default: PropTypes.shape({
      url: PropTypes.string.isRequired,
      width: PropTypes.number.isRequired,
      height: PropTypes.number.isRequired,
    }),
    medium: PropTypes.shape({
      url: PropTypes.string.isRequired,
      width: PropTypes.number.isRequired,
      height: PropTypes.number.isRequired,
    }),
    high: PropTypes.shape({
      url: PropTypes.string.isRequired,
      width: PropTypes.number.isRequired,
      height: PropTypes.number.isRequired,
    }),
    standard: PropTypes.shape({
      url: PropTypes.string.isRequired,
      width: PropTypes.number.isRequired,
      height: PropTypes.number.isRequired,
    }),
    maxres: PropTypes.shape({
      url: PropTypes.string.isRequired,
      width: PropTypes.number.isRequired,
      height: PropTypes.number.isRequired,
    }),
  }).isRequired,
  tags: PropTypes.arrayOf(PropTypes.string).isRequired,
  duration: PropTypes.string.isRequired,
  viewCount: PropTypes.number.isRequired,
  likeCount: PropTypes.number.isRequired,
  commentCount: PropTypes.number.isRequired,
  url: PropTypes.string.isRequired,
  categoryLabels: PropTypes.arrayOf(PropTypes.string),
  categoryIcons: PropTypes.arrayOf(PropTypes.element),
})

// Used to validate the structure of the videos state in Redux.
const videosStateShape = PropTypes.shape({
  isLoading: PropTypes.bool.isRequired,
  errMess: PropTypes.string,
  videos: PropTypes.arrayOf(videoStateShape.isRequired),
})

// ---------------------------- Internal Components ------------------------------

const VideoEngagement = ({ video }) => {
  /*
    Renders a table showing the popularity metrics for the given repository.
    Part of repository metadata. Sourced from github.json.
   */
  return (
    <React.Fragment>
      <table className="table-sm m-0 p-0 w-100 text-center small text-muted">
        <thead>
          <tr>
            <th className="w-25 border">‚≠ê</th>
            <th className="w-25 border">üç¥</th>
            <th className="w-25 border">üëÅ</th>
            <th className="w-25 border">üêõ</th>
          </tr>
        </thead>
        <tbody>
          <tr className="">
            <td className="border">{video.id}</td>
            <td className="border">{video.id}</td>
            <td className="border">{video.id}</td>
            <td className="border">{video.id}</td>
          </tr>
        </tbody>
      </table>
    </React.Fragment>
  )
}
VideoEngagement.propTypes = {
  video: videoStateShape.isRequired,
}

const VideoMetadata = ({ video }) => {
  /*
   Top-level component that renders metadata information for the given repository.
   Only shown on medium and larger screens.
   */
  return (
    <React.Fragment>
      <ContentCategories categories={video.categoryIcons} />
      <VideoEngagement video={video} />
    </React.Fragment>
  )
}
VideoMetadata.propTypes = {
  video: videoStateShape.isRequired,
}

const VideoLink = ({ video }) => {
  /*
   Renders a link to the given repository, with a padlock icon if it's private.
   */
  return (
    <React.Fragment>
      <a href={video.url} target="_blank" rel="noopener noreferrer">
        <strong>{video.title}</strong>
      </a>
    </React.Fragment>
  )
}
VideoLink.propTypes = {
  video: videoStateShape.isRequired,
}

const VideoDescription = ({ video }) => {
  /*
    Renders the README content snippet for the given repository, or a placeholder if none exists.
    README filtering logic is handled in shared/githubDownloader.js.
   */
  return (
    <React.Fragment>
      <div
        className="align-top text-break"
        style={{
          maxHeight: '200px',
          overflowY: 'auto',
          overflowX: 'hidden',
        }}
      >
        <p>{video.description}</p>
      </div>
    </React.Fragment>
  )
}
VideoDescription.propTypes = {
  video: videoStateShape.isRequired,
}

const Video = ({ video }) => {
  /*
    Top-level component that renders the repository link and description.
   */
  return (
    <React.Fragment>
      <table className="mb-0">
        <tbody>
          <tr>
            <td>
              <VideoLink video={video} />
            </td>
          </tr>
          <tr>
            <td className="ps-3 pt-3">
              <VideoDescription video={video} />
            </td>
          </tr>
        </tbody>
      </table>
    </React.Fragment>
  )
}
Video.propTypes = {
  video: videoStateShape.isRequired,
}

// ------------------------------ Main Component ------------------------------

const VideosTable = ({ category, maxrows = 100 }) => {
  /*
   Renders a table of videos and other publications.
   */
  const [currentMaxRows, setCurrentMaxRows] = useState(maxrows)
  const reduxVideos = useSelector((state) => state.videos)
  const reduxSpecialties = useSelector((state) => state.specialties) // for future use.

  console.log('VideosTable reduxVideos:', reduxVideos)

  const unfilteredVideos = [
    ...(category
      ? (reduxVideos.videos || []).filter((redux) =>
          (redux.categories || []).includes(category)
        )
      : reduxVideos.videos || []),
  ]
    .map((video) => {
      // If category is specified, remove the corresponding entry so that it doesn't
      // redundantly appear in the table.
      if (category && video.categories) {
        const categoryIndex = video.categories.indexOf(category)
        if (categoryIndex !== -1) {
          return {
            ...video,
            categories: video.categories.filter((_, index) => index !== categoryIndex),
          }
        }
      }
      return video
    })
    .map((video) => ({
      ...video,
      categoryLabels: (video.categories || []).map(categoryLabel).filter(Boolean),
      categoryIcons: (video.categories || [])
        .map((categoryCode) => categoryIcon(categoryCode, reduxSpecialties))
        .filter(Boolean),
    }))
    .sort((a, b) => {
      return new Date(b.modified_gmt) - new Date(a.modified_gmt)
    })

  const unfilteredCount = unfilteredVideos.length
  const filteredVideos = unfilteredVideos.slice(0, currentMaxRows)

  const handleShowMore = () => {
    setCurrentMaxRows(1000)
  }

  return (
    <div className="table-responsive">
      {reduxVideos.isLoading ? (
        <Loading />
      ) : (
        <React.Fragment>
          <table
            className="table table-bordered table-striped table-fixed mt-4 w-100"
            id="code-samples-table"
          >
            <thead className="thead-dark">
              <tr>
                <th style={{ width: '80%' }}>Video</th>
                <th className="hide-medium" style={{ width: '20%' }}></th>
              </tr>
            </thead>
            <tbody>
              {filteredVideos.map((video) => (
                <tr key={video.id}>
                  <td className="align-top">
                    <Video video={video} />
                  </td>
                  <td className="hide-medium">
                    <VideoMetadata video={video} />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {unfilteredCount > currentMaxRows && (
            <div className="text-center mt-3">
              <button className="btn btn-primary" onClick={handleShowMore}>
                More ({unfilteredCount - currentMaxRows} remaining)
              </button>
            </div>
          )}
        </React.Fragment>
      )}
    </div>
  )
}

VideosTable.propTypes = {
  category: PropTypes.string,
  maxrows: PropTypes.number,
}

export default VideosTable
export { videoStateShape, videosStateShape }
