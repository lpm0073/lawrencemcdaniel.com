/*
    Articles Component.

    This is a Redux-managed React component that renders a table of code samples from
    GitHub Api. It displays repositories with metadata such as
    engagement metrics, last commit date, languages used, and skills.
 */
import React, { useState } from 'react'
import PropTypes from 'prop-types'
import { useSelector } from 'react-redux'
import { skillIcon, skillLabel } from '../Component'
import Loading from '../../Loading'

import './styles.css'

// Used to validate the structure of the public/data/blog.lawrencemcdaniel.com.json data for each
// blog article in the Redux store, which itself is generated by the
// shared/githubDownloader.js script which is run weekly on a cron schedule by
// Github Actions and included in the react build so that it can be locally served to Redux.
const articleStateShape = PropTypes.shape({
  id: PropTypes.number.isRequired,
  modified_gmt: PropTypes.string.isRequired,
  slug: PropTypes.string.isRequired,
  status: PropTypes.string.isRequired,
  type: PropTypes.string.isRequired,
  link: PropTypes.string.isRequired,
  title: PropTypes.shape({
    rendered: PropTypes.string.isRequired,
  }).isRequired,
  excerpt: PropTypes.shape({
    rendered: PropTypes.string.isRequired,
    protected: PropTypes.bool.isRequired,
  }).isRequired,
  author: PropTypes.number.isRequired,
  featured_media: PropTypes.number.isRequired,
  skills: PropTypes.arrayOf(PropTypes.string).isRequired,
  tags: PropTypes.arrayOf(PropTypes.string).isRequired,
  yoast_head_json: PropTypes.shape({
    title: PropTypes.string,
    description: PropTypes.string,
    canonical: PropTypes.string,
    og_locale: PropTypes.string,
    og_type: PropTypes.string,
    og_title: PropTypes.string,
    og_description: PropTypes.string,
    og_url: PropTypes.string,
    article_modified_time: PropTypes.string,
    og_image: PropTypes.arrayOf(
      PropTypes.shape({
        width: PropTypes.number,
        height: PropTypes.number,
        url: PropTypes.string,
        type: PropTypes.string,
      })
    ),
  }),
  _links: PropTypes.arrayOf(
    PropTypes.shape({
      embeddable: PropTypes.bool,
      href: PropTypes.string,
    })
  ),
  skillLabels: PropTypes.arrayOf(PropTypes.string),
  skillIcons: PropTypes.arrayOf(PropTypes.element),
})

// Used to validate the structure of the articles state in Redux.
const articlesStateShape = PropTypes.shape({
  isLoading: PropTypes.bool.isRequired,
  errMess: PropTypes.string,
  articles: PropTypes.arrayOf(articleStateShape.isRequired),
})

// ---------------------------- Internal Components ------------------------------

const ArticleMetadata = ({ article }) => {
  /*
   Top-level component that renders metadata information for the given repository.
   Only shown on medium and larger screens.
   */
  return (
    <article>
      <img
        className="img-fluid"
        src={article.yoast_head_json.og_image[0].url}
        alt={article.yoast_head_json.title}
        title={article.yoast_head_json.title}
        loading="lazy"
        width={article.yoast_head_json.og_image[0].width}
        height={article.yoast_head_json.og_image[0].height}
      />
    </article>
  )
}
ArticleMetadata.propTypes = {
  article: articleStateShape.isRequired,
}

const ArticleLink = ({ article }) => {
  /*
   Renders a link to the given repository, with a padlock icon if it's private.
   */
  return (
    <React.Fragment>
      <a href={article.link} target="_blank" rel="noopener noreferrer">
        <strong>{article.yoast_head_json.title}</strong>
      </a>
    </React.Fragment>
  )
}
ArticleLink.propTypes = {
  article: articleStateShape.isRequired,
}

const ArticleDescription = ({ article }) => {
  /*
    Renders the README content snippet for the given repository, or a placeholder if none exists.
    README filtering logic is handled in shared/githubDownloader.js.
   */
  return (
    <React.Fragment>
      <div
        className="align-top text-break"
        style={{
          maxHeight: '200px',
          overflowY: 'auto',
          overflowX: 'hidden',
        }}
        dangerouslySetInnerHTML={{
          __html: article.excerpt?.rendered || '<em>No description available</em>',
        }}
      />
    </React.Fragment>
  )
}
ArticleDescription.propTypes = {
  article: articleStateShape.isRequired,
}

const Article = ({ article }) => {
  /*
    Top-level component that renders the repository link and description.
   */
  return (
    <article>
      <table className="mb-0" aria-label={`Article ${article?.title?.rendered}`}>
        <tbody>
          <tr>
            <td>
              <ArticleLink article={article} />
            </td>
          </tr>
          <tr>
            <td className="ps-3 pt-3">
              <ArticleDescription article={article} />
            </td>
          </tr>
        </tbody>
      </table>
    </article>
  )
}
Article.propTypes = {
  article: articleStateShape.isRequired,
}

// ------------------------------ Main Component ------------------------------

const ArticlesTable = ({ skill, maxrows = 100 }) => {
  /*
   Renders a table of blog articles and other publications.
   */
  const [currentMaxRows, setCurrentMaxRows] = useState(maxrows)
  const reduxArticles = useSelector((state) => state.articles)
  const reduxSpecialties = useSelector((state) => state.specialties)

  const unfilteredArticles = [
    ...(skill
      ? reduxArticles.articles.filter((redux) => redux.skills.includes(skill))
      : reduxArticles.articles),
  ]
    .map((article) => {
      // If skill is specified, remove the corresponding entry so that it doesn't
      // redundantly appear in the table.
      if (skill && article.skills) {
        const skillIndex = article.skills.indexOf(skill)
        if (skillIndex !== -1) {
          return {
            ...article,
            skills: article.skills.filter((_, index) => index !== skillIndex),
          }
        }
      }
      return article
    })
    .map((article) => ({
      ...article,
      skillLabels: article.skills.map(skillLabel).filter(Boolean),
      skillIcons: article.skills
        .map((skillCode) => skillIcon(skillCode, reduxSpecialties))
        .filter(Boolean),
    }))
    .sort((a, b) => {
      return new Date(b.modified_gmt) - new Date(a.modified_gmt)
    })

  const unfilteredCount = unfilteredArticles.length
  const filteredArticles = unfilteredArticles.slice(0, currentMaxRows)

  const handleShowMore = () => {
    setCurrentMaxRows(1000)
  }

  return (
    <section className="table-responsive" aria-label="Articles">
      {reduxArticles.isLoading ? (
        <Loading />
      ) : (
        <React.Fragment>
          <table
            className="table table-bordered table-striped table-fixed mt-1 w-100"
            id="articles-table"
          >
            <thead className="thead-dark">
              <tr>
                <th style={{ width: '80%' }}>Article</th>
                <th className="hide-medium" style={{ width: '20%' }}></th>
              </tr>
            </thead>
            <tbody>
              {filteredArticles.map((article) => (
                <tr key={article.id}>
                  <td className="align-top">
                    <Article article={article} />
                  </td>
                  <td className="hide-medium p-0">
                    <ArticleMetadata article={article} />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {unfilteredCount > currentMaxRows && (
            <div className="text-center mt-3">
              <button className="btn btn-primary" onClick={handleShowMore}>
                More ({unfilteredCount - currentMaxRows} remaining)
              </button>
            </div>
          )}
        </React.Fragment>
      )}
    </section>
  )
}

ArticlesTable.propTypes = {
  skill: PropTypes.string,
  maxrows: PropTypes.number,
}

export default ArticlesTable
export { articleStateShape, articlesStateShape }
