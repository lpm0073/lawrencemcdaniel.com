/*
    Articles Component.

    This is a Redux-managed React component that renders a table of code samples from
    GitHub Api. It displays repositories with metadata such as
    engagement metrics, last commit date, languages used, and categories.
 */
import React from 'react'
import PropTypes from 'prop-types'
import { useSelector } from 'react-redux'
import { categoryIcon, categoryLabel } from '../../shared/category'
import Loading from '../Loading'

import './styles.css'

// Used to validate the structure of the public/data/blog.lawrencemcdaniel.com.json data for each
// blog article in the Redux store, which itself is generated by the
// shared/githubDownloader.js script which is run weekly on a cron schedule by
// Github Actions and included in the react build so that it can be locally served to Redux.
const articleStateShape = PropTypes.shape({
  id: PropTypes.number.isRequired,
  modified_gmt: PropTypes.string.isRequired,
  slug: PropTypes.string.isRequired,
  status: PropTypes.string.isRequired,
  type: PropTypes.string.isRequired,
  link: PropTypes.string.isRequired,
  excerpt: PropTypes.shape({
    rendered: PropTypes.string.isRequired,
    protected: PropTypes.bool.isRequired,
  }).isRequired,
  author: PropTypes.number.isRequired,
  featured_media: PropTypes.number.isRequired,
  categories: PropTypes.arrayOf(PropTypes.string).isRequired,
  tags: PropTypes.arrayOf(PropTypes.string).isRequired,
  yoast_head_json: PropTypes.shape({
    title: PropTypes.string,
    description: PropTypes.string,
    canonical: PropTypes.string,
    og_locale: PropTypes.string,
    og_type: PropTypes.string,
    og_title: PropTypes.string,
    og_description: PropTypes.string,
    og_url: PropTypes.string,
    article_modified_time: PropTypes.string,
    og_image: PropTypes.arrayOf(
      PropTypes.shape({
        width: PropTypes.number,
        height: PropTypes.number,
        url: PropTypes.string,
        type: PropTypes.string,
      })
    ),
  }),
  _links: PropTypes.arrayOf(
    PropTypes.shape({
      embeddable: PropTypes.bool,
      href: PropTypes.string,
    })
  ),
})

// Used to validate the structure of the articles state in Redux.
const articlesStateShape = PropTypes.shape({
  isLoading: PropTypes.bool.isRequired,
  errMess: PropTypes.string,
  articles: PropTypes.arrayOf(articleStateShape.isRequired),
})

// ---------------------------- Internal Components ------------------------------

const ArticleEngagement = ({ article }) => {
  /*
    Renders a table showing the popularity metrics for the given repository.
    Part of repository metadata. Sourced from github.json.
   */
  return (
    <React.Fragment>
      <table className="table-sm m-0 p-0 w-100 text-center small text-muted">
        <thead>
          <tr>
            <th className="w-25 border">‚≠ê</th>
            <th className="w-25 border">üç¥</th>
            <th className="w-25 border">üëÅ</th>
            <th className="w-25 border">üêõ</th>
          </tr>
        </thead>
        <tbody>
          <tr className="">
            <td className="border">{article.stargazers_count}</td>
            <td className="border">{article.forks}</td>
            <td className="border">{article.watchers}</td>
            <td className="border">{article.open_issues}</td>
          </tr>
        </tbody>
      </table>
    </React.Fragment>
  )
}
ArticleEngagement.propTypes = {
  article: articleStateShape.isRequired,
}

const ArticleMetadata = ({ article }) => {
  /*
   Top-level component that renders metadata information for the given repository.
   Only shown on medium and larger screens.
   */
  return (
    <React.Fragment>
      <ContentCategories article={article} />
      <ArticleEngagement article={article} />
    </React.Fragment>
  )
}
ArticleMetadata.propTypes = {
  article: articleStateShape.isRequired,
}

const ArticleLink = ({ article }) => {
  /*
   Renders a link to the given repository, with a padlock icon if it's private.
   */
  return (
    <React.Fragment>
      <a href={article.link} target="_blank" rel="noopener noreferrer">
        <strong>{article.yoast_head_json.title}</strong>
      </a>
    </React.Fragment>
  )
}
ArticleLink.propTypes = {
  article: articleStateShape.isRequired,
}

const ArticleDescription = ({ article }) => {
  /*
    Renders the README content snippet for the given repository, or a placeholder if none exists.
    README filtering logic is handled in shared/githubDownloader.js.
   */
  return (
    <React.Fragment>
      <div
        className="code-sample-readme align-top text-break"
        style={{
          maxHeight: '200px',
          overflowY: 'auto',
          overflowX: 'hidden',
        }}
        dangerouslySetInnerHTML={{
          __html: article.excerpt?.rendered || '<em>No description available</em>',
        }}
      />
    </React.Fragment>
  )
}
ArticleDescription.propTypes = {
  article: articleStateShape.isRequired,
}

const Article = ({ article }) => {
  /*
    Top-level component that renders the repository link and description.
   */
  return (
    <React.Fragment>
      <table className="mb-0">
        <tbody>
          <tr>
            <td>
              <ArticleLink article={article} />
            </td>
          </tr>
          <tr>
            <td className="ps-3 pt-3">
              <ArticleDescription article={article} />
            </td>
          </tr>
        </tbody>
      </table>
    </React.Fragment>
  )
}
Article.propTypes = {
  article: articleStateShape.isRequired,
}

// ------------------------------ Main Component ------------------------------

const ArticlesTable = ({ category, maxrows=100 }) => {
  /*
   Renders a table of blog articles and other publications.
   */
  const reduxArticles = useSelector((state) => state.articles)
  const reduxSpecialties = useSelector((state) => state.specialties)    // for future use.
  const filteredArticles = [
    ...(category
      ? reduxArticles.articles.filter((redux) => redux.categories.includes(category))
      : reduxArticles.articles),
  ]
    .map((article) => {
      // If category is specified, remove the corresponding entry so that it doesn't
      // redundantly appear in the table.
      if (category && article.categories) {
        const categoryIndex = article.categories.indexOf(category)
        if (categoryIndex !== -1) {
          return {
            ...article,
            categories: article.categories.filter((_, index) => index !== categoryIndex),
          }
        }
      }
      return article
    })
    .map((article) => ({
      ...article,
      categoryLabels: article.categories.map(categoryLabel).filter(Boolean),
      categoryIcons: article.categories
        .map((categoryCode) => categoryIcon(categoryCode, reduxSpecialties))
        .filter(Boolean),
    }))
    .sort((a, b) => {
      // to do: design an engagement metric.
      return 1
    })
    .slice(0, maxrows)

  return (
    <div className="table-responsive">
      {reduxArticles.isLoading ? (
        <Loading />
      ) : (
        <React.Fragment>
          <table
            className="table table-bordered table-striped table-fixed mt-4 w-100"
            id="code-samples-table"
          >
            <thead className="thead-dark">
              <tr>
                <th style={{ width: '80%' }}>Article</th>
                <th className="hide-medium" style={{ width: '20%' }}></th>
              </tr>
            </thead>
            <tbody>
              {filteredArticles.map((article) => (
                <tr key={article.name}>
                  <td className="align-top">
                    <Article article={article} />
                  </td>
                  <td className="hide-medium">
                    <ArticleMetadata article={article} />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </React.Fragment>
      )}
    </div>
  )
}
ArticlesTable.propTypes = {
  category: PropTypes.string,
}

export default ArticlesTable
export { articleStateShape, articlesStateShape }
