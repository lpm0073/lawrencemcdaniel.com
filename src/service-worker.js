/* eslint-disable no-restricted-globals */
/* eslint-disable no-unused-vars */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

//-----------------------------------------------
// Google Workbox
//-----------------------------------------------
import { clientsClaim } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { CacheableResponsePlugin } from 'workbox-cacheable-response'
import { CacheFirst } from 'workbox-strategies'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate } from 'workbox-strategies'
//-----------------------------------------------

import { APP_CONFIG } from './shared/constants'

// Public assets images that are part of app startup and should exist offline.
const PUBLIC_ASSETS_IMAGES = ['amazon-web-services.png', 'mit-idss-logo-230x141.jpg', 'react-logo-300x261.png', 'angular-logo.png', 'open-edx.png', 'redux-logo.svg', 'aws-logo.png', 'openai-logo.png', 'screenshot1.png', 'data-science-icon.png', 'padlock.png', 'screenshot2.jpg', 'django-logo-300x137.png', 'pancakes.png', 'terraform-logo.png', 'edx-logo.png', 'python-logo.png', 'workbox-logo.svg', 'kubernetes-logo-513x261.png', 'react-brands.svg']
const ROOT_STATIC = [
  'favicon.jpg',
  'favicon-offline.jpg',
  'logo192.jpg',
  'logo512.jpg',
  'manifest.json',
  'package.json',
  'robots.txt',
  'sitemap.xml',
  'sitemap.xsl',
]


function isImageFile(url) {
  const urlObj = new URL(url)
  const pathname = urlObj.pathname

  return (
    pathname.endsWith('.png') ||
    pathname.endsWith('.jpg') ||
    pathname.endsWith('.jpeg') ||
    pathname.endsWith('.gif') ||
    pathname.endsWith('.tif') ||
    pathname.endsWith('.tiff') ||
    pathname.endsWith('.svg') ||
    pathname.endsWith('.webp') ||
    pathname.endsWith('.avif') ||
    pathname.endsWith('.bmp') ||
    pathname.endsWith('.ico')
  )
}

// ------------------------- Cache Expiration Policies ------------------------
const app_cache_expiration = new ExpirationPlugin({
  maxEntries: 100,           // Maximum number of entries to keep
  maxAgeSeconds: APP_CONFIG.caching.expirations.app,
  purgeOnQuotaError: true,  // Delete cache if storage quota exceeded
})

const api_cache_expiration = new ExpirationPlugin({
  maxEntries: 100,           // Maximum number of entries to keep
  maxAgeSeconds: APP_CONFIG.caching.expirations.api,
  purgeOnQuotaError: true,  // Delete cache if storage quota exceeded
})

const image_cache_expiration = new ExpirationPlugin({
  maxEntries: 1000,           // Maximum number of entries to keep
  maxAgeSeconds: APP_CONFIG.caching.expirations.images,
  purgeOnQuotaError: true,  // Delete cache if storage quota exceeded
})

// ----------------------------------------
// create-react-app generated Workbox code
// ----------------------------------------
clientsClaim()

// Precache all of the assets generated by the build process. See https://cra.link/PWA
const allPrecacheEntries = [
  ...self.__WB_MANIFEST,
  ...PUBLIC_ASSETS_IMAGES.map(image => ({ revision: null, url: `/assets/images/${image}` })),
  ...ROOT_STATIC.map(file => ({ revision: null, url: `/${file}` })),
  { revision: null, url: 'https://cdn.lawrencemcdaniel.com/lawrencemcdaniel-headshot-square.jpeg'  },

];

// Deduplicate by URL (ignoring ?__WB_REVISION__)
const manifestMap = new Map();
allPrecacheEntries.forEach(entry => {
  const url = entry.url.split('?__WB_REVISION__=')[0];
  manifestMap.set(url, entry); // Keeps the last revision for each URL
});

const dedupedManifest = Array.from(manifestMap.values());

precacheAndRoute(dedupedManifest);


// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with the index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false
    } // Return true to signal that we want to use the handler.

    return true
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
)

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})
self.addEventListener('install', (event) => {
  self.skipWaiting()
})

// Cleanup old caches
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames
          .filter(name =>
            !Object.values(APP_CONFIG.caching.names).includes(name) &&
            !name.startsWith('workbox-precache')
          )
          .map(name => caches.delete(name))
      )
    })
  )
})

/*
  --------------------------------------------------------------------------------
  McDaniel Oct-2021
  Custom caching behavior.
  --------------------------------------------------------------------------------
*/
async function initializeServiceWorker() {

  // Now register routes with the correct cache version

  // Cache the app manifest
  // https://lawrencemcdaniel.com/manifest.json
  registerRoute(
    ({ url }) => url.href === `${APP_CONFIG.urls.site}/manifest.json`,
    new StaleWhileRevalidate({
      cacheName: APP_CONFIG.caching.names.app,
      plugins: [app_cache_expiration],
    })
  )

  // Cache api responses with a stale-while-revalidate strategy
  // example: https://api.lawrencemcdaniel.com/wp-json/wp/v2/posts?categories=43&_embed&per_page=100
  registerRoute(
    ({ url }) => url.origin === APP_CONFIG.urls.api,
    new StaleWhileRevalidate({
      cacheName: APP_CONFIG.caching.names.api,
      plugins: [api_cache_expiration],
    })
  )

  // Cache publicly served site assets
  // example: https://lawrencemcdaniel.com/assets/images/aws-logo.png
  registerRoute(
    ({ url }) =>
      url.origin === APP_CONFIG.urls.site &&
      url.pathname.startsWith('/assets/'),
    new CacheFirst({
      cacheName: APP_CONFIG.caching.names.app,
      plugins: [app_cache_expiration],
    })
  )
  // Cache publicly served site assets
  // example: https://lawrencemcdaniel.com/static/js/main.31a46224.js
  registerRoute(
    ({ url }) =>
      url.origin === APP_CONFIG.urls.site &&
      url.pathname.startsWith('/static/'),
    new CacheFirst({
      cacheName: APP_CONFIG.caching.names.app,
      plugins: [app_cache_expiration],
    })
  )

  // Cache cdn content with a CacheFirst strategy
  // example: https://cdn.lawrencemcdaniel.com/wp-content/uploads/2025/08/14160105/bandit-logo-1024x231.png
  registerRoute(
    ({ url }) => url.origin === APP_CONFIG.urls.cdn,
    new CacheFirst({
      cacheName: APP_CONFIG.caching.names.cdn,
      plugins: [
        new CacheableResponsePlugin({ statuses: [0, 200] }),
        image_cache_expiration,
      ],
    })
  )

  // Images that are statically served from the React build itself.
  registerRoute(
    ({ url }) => url.origin === self.location.origin && isImageFile(url),
    new StaleWhileRevalidate({
      cacheName: APP_CONFIG.caching.names.staticImages,
      plugins: [image_cache_expiration],
    })
  )

  // Cache Google Fonts with a stale-while-revalidate strategy
  registerRoute(
    ({ url }) =>
      url.origin === 'https://fonts.googleapis.com' ||
      url.origin === 'https://fonts.gstatic.com',
    new StaleWhileRevalidate({
      cacheName: APP_CONFIG.caching.names.app,
      plugins: [app_cache_expiration],
    })
  )

}

initializeServiceWorker()
