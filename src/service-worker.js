/* eslint-disable no-restricted-globals */
/* eslint-disable no-unused-vars */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

//-----------------------------------------------
// Google Workbox
//-----------------------------------------------
import { clientsClaim } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { CacheableResponsePlugin } from 'workbox-cacheable-response'
import { CacheFirst } from 'workbox-strategies'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate } from 'workbox-strategies'
//-----------------------------------------------
import { DEBUG, CACHE_EXPIRATION_IMAGES, CACHE_EXPIRATION_API } from './shared/constants'
import { wpPrefetch } from './shared/wpPrefetch'
import {
  URL_CDN, // AWS Cloudfront distribution: https://cdn.lawrencemcdaniel.com
  URL_API, // Wordpress REST apis: https://api.lawrencemcdaniel.com
  URL_SITE, // This site: https://lawrencemcdaniel.com

  // Wordpress REST apis
  // -------------------
  URL_API_SPECIALTIES,
  URL_API_PORTFOLIO,
  URL_API_EDUCATION,
  URL_API_RECOMMENDATIONS,
  URL_API_PROJECTS,
  URL_API_CLIENTS,
} from './shared/constants'

const app_expiration = new ExpirationPlugin({
  maxEntries: 25,           // Maximum number of entries to keep
  maxAgeSeconds: 60 * 60 * 24 * 7,  // 7 days in seconds
  purgeOnQuotaError: true,  // Delete cache if storage quota exceeded
})

const api_expiration = new ExpirationPlugin({
  maxEntries: 25,           // Maximum number of entries to keep
  maxAgeSeconds: CACHE_EXPIRATION_API / 1000,  // Convert ms to seconds
  purgeOnQuotaError: true,  // Delete cache if storage quota exceeded
})

const image_expiration = new ExpirationPlugin({
  maxEntries: 1000,           // Maximum number of entries to keep
  maxAgeSeconds: CACHE_EXPIRATION_IMAGES / 1000,  // Convert ms to seconds
  purgeOnQuotaError: true,  // Delete cache if storage quota exceeded
})

// Initialize cache version synchronously with a default
let CACHE_VERSION = '1.0.0'

async function getCacheVersion() {
  try {
    const response = await fetch(
      'https://raw.githubusercontent.com/lpm0073/lawrencemcdaniel.com/main/package.json'
    )
    if (!response.ok) {
      throw new Error(`service-worker.js Fetching package.json from GitHub returned a non-200 response: ${response.statusText}`);
    }
    const packageJson = await response.json()
    return packageJson.version
  } catch (error) {
    console.error('service-worker.js Failed to fetch package.json:', error.message, error);
    return '1.0.0' // Fallback version;
  }
}

// Update cache version asynchronously after initial setup
getCacheVersion().then(version => {
  CACHE_VERSION = version
  console.log('service-worker.js - CACHE_VERSION: ', CACHE_VERSION)
})

// ----------------------------------------
// create-react-app generated Workbox code
// ----------------------------------------
clientsClaim()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false
    } // Return true to signal that we want to use the handler.

    return true
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
)

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    if (DEBUG) console.log('service-worker.js - SKIP_WAITING message received.')
    self.skipWaiting()
  }
})

/*
  --------------------------------------------------------------------------------
  McDaniel Oct-2021
  Custom caching behavior.
  --------------------------------------------------------------------------------
  */

function isImageFile(url) {
  const urlObj = new URL(url)
  const pathname = urlObj.pathname

  return (
    pathname.endsWith('.png') ||
    pathname.endsWith('.jpg') ||
    pathname.endsWith('.jpeg') ||
    pathname.endsWith('.gif') ||
    pathname.endsWith('.tif') ||
    pathname.endsWith('.tiff') ||
    pathname.endsWith('.svg') ||
    pathname.endsWith('.webp') ||
    pathname.endsWith('.avif') ||
    pathname.endsWith('.bmp') ||
    pathname.endsWith('.ico')
  )
}

function versioned_cached(name) {
  return name + '-' + CACHE_VERSION
}

// Cache the app manifest
registerRoute(
  ({ url }) => url.href === `${URL_SITE}/manifest.json`,
  new StaleWhileRevalidate({
    cacheName: versioned_cached('manifest'),
    plugins: [app_expiration],
  })
)

// Cache api responses with a stale-while-revalidate strategy
registerRoute(
  ({ url }) => url.origin === URL_API,
  new StaleWhileRevalidate({
    cacheName: versioned_cached('api-responses'),
    plugins: [api_expiration],
  })
)

// Cache cdn content with a CacheFirst strategy
registerRoute(
  ({ url }) => url.origin === URL_CDN,
  new CacheFirst({
    cacheName: versioned_cached('cdn-responses'),
    plugins: [
      new CacheableResponsePlugin({ statuses: [0, 200] }),
      image_expiration,
    ],
  })
)

// Images that are statically served from the React build itself.
registerRoute(
  ({ url }) => url.origin === self.location.origin && isImageFile(url),
  new StaleWhileRevalidate({
    cacheName: versioned_cached('static-images'),
    plugins: [image_expiration],
  })
)

// Cache Google Fonts with a stale-while-revalidate strategy
registerRoute(
  ({ url }) =>
    url.origin === 'https://fonts.googleapis.com' ||
    url.origin === 'https://fonts.gstatic.com',
  new StaleWhileRevalidate({
    cacheName: versioned_cached('google-fonts'),
    plugins: [app_expiration],
  })
)

// CDN IMAGE PRECACHING - run after cache version is potentially updated
getCacheVersion().then(() => {
  wpPrefetch(URL_API_SPECIALTIES) // do me first!!!
  wpPrefetch(URL_API_CLIENTS)
  wpPrefetch(URL_API_EDUCATION)
  wpPrefetch(URL_API_PORTFOLIO)
  wpPrefetch(URL_API_PROJECTS)
  wpPrefetch(URL_API_RECOMMENDATIONS)
})
