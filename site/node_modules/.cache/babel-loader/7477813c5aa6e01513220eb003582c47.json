{"ast":null,"code":"import { useRef } from 'react';\n\nconst drawCircle = () => {\n  const ref = useRef();\n  let canvas = ref.current;\n  let context = canvas.getContext('2d');\n  let ratio = getPixelRatio(context);\n  let width = getComputedStyle(canvas).getPropertyValue('width').slice(0, -2);\n  let height = getComputedStyle(canvas).getPropertyValue('height').slice(0, -2);\n  canvas.width = width * ratio;\n  canvas.height = height * ratio;\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n  context.lineWidth = 10;\n  context.strokeStyle = '#474D5D';\n  context.shadowColor = '#656565';\n  var x = canvas.width / 2;\n  var y = canvas.height / 2;\n  var radius = x - context.lineWidth;\n  var endPercent = 100;\n  var circ = Math.PI * 2;\n  var quart = Math.PI / 2;\n  var i = 0;\n  let requestId;\n\n  const render = pct => {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.beginPath();\n    context.arc(x, y, radius, -quart, circ * pct - quart, false);\n    context.stroke();\n    i += 2;\n\n    if (i <= endPercent) {\n      requestId = requestAnimationFrame(function () {\n        render(i / 100);\n      });\n    }\n  };\n\n  setTimeout(function () {\n    render();\n  }, Math.random() * 300);\n  return () => {\n    cancelAnimationFrame(requestId);\n  };\n};\n\nexport default drawCircle;","map":{"version":3,"sources":["/Users/mcdaniel/github/lpm0073/lawrencemcdaniel.com/site/src/pages/skills/drawCircle.js"],"names":["useRef","drawCircle","ref","canvas","current","context","getContext","ratio","getPixelRatio","width","getComputedStyle","getPropertyValue","slice","height","style","lineWidth","strokeStyle","shadowColor","x","y","radius","endPercent","circ","Math","PI","quart","i","requestId","render","pct","clearRect","beginPath","arc","stroke","requestAnimationFrame","setTimeout","random","cancelAnimationFrame"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;;AAIA,MAAMC,UAAU,GAAG,MAAM;AACrB,QAAMC,GAAG,GAAGF,MAAM,EAAlB;AACA,MAAIG,MAAM,GAAGD,GAAG,CAACE,OAAjB;AACA,MAAIC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAd;AAEA,MAAIC,KAAK,GAAGC,aAAa,CAACH,OAAD,CAAzB;AACA,MAAII,KAAK,GAAGC,gBAAgB,CAACP,MAAD,CAAhB,CAAyBQ,gBAAzB,CAA0C,OAA1C,EAAmDC,KAAnD,CAAyD,CAAzD,EAA4D,CAAC,CAA7D,CAAZ;AACA,MAAIC,MAAM,GAAGH,gBAAgB,CAACP,MAAD,CAAhB,CAAyBQ,gBAAzB,CAA0C,QAA1C,EAAoDC,KAApD,CAA0D,CAA1D,EAA6D,CAAC,CAA9D,CAAb;AAEAT,EAAAA,MAAM,CAACM,KAAP,GAAeA,KAAK,GAAGF,KAAvB;AACAJ,EAAAA,MAAM,CAACU,MAAP,GAAgBA,MAAM,GAAGN,KAAzB;AACAJ,EAAAA,MAAM,CAACW,KAAP,CAAaL,KAAb,GAAsB,GAAEA,KAAM,IAA9B;AACAN,EAAAA,MAAM,CAACW,KAAP,CAAaD,MAAb,GAAuB,GAAEA,MAAO,IAAhC;AAEAR,EAAAA,OAAO,CAACU,SAAR,GAAoB,EAApB;AACAV,EAAAA,OAAO,CAACW,WAAR,GAAsB,SAAtB;AACAX,EAAAA,OAAO,CAACY,WAAR,GAAsB,SAAtB;AAGA,MAAIC,CAAC,GAAGf,MAAM,CAACM,KAAP,GAAe,CAAvB;AACA,MAAIU,CAAC,GAAGhB,MAAM,CAACU,MAAP,GAAgB,CAAxB;AACA,MAAIO,MAAM,GAAGF,CAAC,GAAGb,OAAO,CAACU,SAAzB;AACA,MAAIM,UAAU,GAAG,GAAjB;AACA,MAAIC,IAAI,GAAGC,IAAI,CAACC,EAAL,GAAU,CAArB;AACA,MAAIC,KAAK,GAAGF,IAAI,CAACC,EAAL,GAAU,CAAtB;AACA,MAAIE,CAAC,GAAG,CAAR;AACA,MAAIC,SAAJ;;AAEA,QAAMC,MAAM,GAAIC,GAAD,IAAS;AAEpBxB,IAAAA,OAAO,CAACyB,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwB3B,MAAM,CAACM,KAA/B,EAAsCN,MAAM,CAACU,MAA7C;AACAR,IAAAA,OAAO,CAAC0B,SAAR;AACA1B,IAAAA,OAAO,CAAC2B,GAAR,CAAYd,CAAZ,EAAeC,CAAf,EAAkBC,MAAlB,EAA0B,CAAEK,KAA5B,EAAqCH,IAAI,GAAGO,GAAR,GAAeJ,KAAnD,EAA0D,KAA1D;AACApB,IAAAA,OAAO,CAAC4B,MAAR;AACAP,IAAAA,CAAC,IAAG,CAAJ;;AAEA,QAAIA,CAAC,IAAIL,UAAT,EAAqB;AACjBM,MAAAA,SAAS,GAAGO,qBAAqB,CAAC,YAAY;AAC1CN,QAAAA,MAAM,CAACF,CAAC,GAAG,GAAL,CAAN;AACH,OAFgC,CAAjC;AAGH;AAEJ,GAdD;;AAgBAS,EAAAA,UAAU,CAAC,YAAU;AACjBP,IAAAA,MAAM;AACT,GAFS,EAEPL,IAAI,CAACa,MAAL,KAAgB,GAFT,CAAV;AAKA,SAAO,MAAM;AACTC,IAAAA,oBAAoB,CAACV,SAAD,CAApB;AACH,GAFD;AAIH,CArDD;;AAuDA,eAAe1B,UAAf","sourcesContent":["import { useRef } from 'react';\n\n\n\nconst drawCircle = () => {\n    const ref = useRef();\n    let canvas = ref.current;\n    let context = canvas.getContext('2d');\n    \n    let ratio = getPixelRatio(context);\n    let width = getComputedStyle(canvas).getPropertyValue('width').slice(0, -2);\n    let height = getComputedStyle(canvas).getPropertyValue('height').slice(0, -2);\n            \n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    context.lineWidth = 10;\n    context.strokeStyle = '#474D5D';\n    context.shadowColor = '#656565';\n \n\n    var x = canvas.width / 2;\n    var y = canvas.height / 2;\n    var radius = x - context.lineWidth;\n    var endPercent = 100;\n    var circ = Math.PI * 2;\n    var quart = Math.PI / 2;\n    var i = 0;\n    let requestId;\n\n    const render = (pct) => {\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.beginPath();\n        context.arc(x, y, radius, -(quart), (circ * pct) - quart, false);\n        context.stroke();\n        i +=2;\n \n        if (i <= endPercent) {\n            requestId = requestAnimationFrame(function () {\n                render(i / 100)\n            });\n        }\n \n    };\n\n    setTimeout(function(){ \n        render(); \n    }, Math.random() * 300);\n    \n\n    return () => {\n        cancelAnimationFrame(requestId);\n    };\n\n}\n\nexport default drawCircle;\n"]},"metadata":{},"sourceType":"module"}