{"ast":null,"code":"var _jsxFileName = \"/Users/mcdaniel/github/lpm0073/lawrencemcdaniel.com/site/src/components/logocube/Component.js\";\n\n/*\n    https://www.smashingmagazine.com/2018/02/react-d3-ecosystem/\n */\nimport React, { Component } from 'react';\nimport { wpGetFeaturedImage } from '../../shared/wpGetFeaturedImage';\nimport './styles.css';\nimport Loading from '../Loading';\n\nconst LogoDiv = props => {\n  const clsId = \"d3-side \" + props.side;\n  const divId = \"cube-\" + props.side + \"-logo\";\n  const divStyle = {\n    \"background-image\": props.url\n  };\n  console.log(\"LogoDiv()\", props.side, props.url);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: divId,\n    className: clsId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 47\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"logo\",\n    style: Object.assign(divStyle),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 17\n    }\n  }))));\n};\n\nclass LogoCube extends Component {\n  constructor(props) {\n    super(props);\n    /*\n        Note: one ugly side effect of the randomness in choosing which side to update, and\n        the time at which to update is that, sometimes, the same panel gets chosen very quickly\n        which leads to jerky-looking behavior.\n         To prevent this we keep track of how long each logo has been on a given cube side.\n        the repaint() method will only repaint a side if that side has in-state for at least \n        X milliseconds.\n     */\n\n    var d = new Date();\n    d.setSeconds(d.getSeconds() - 2);\n    const logos = this.props.logos.items.map((post, indx) => {\n      return wpGetFeaturedImage(post, null);\n    });\n    this.state = {\n      logos: logos,\n      timeout: null,\n      cubeTop: d,\n      cubeBottom: d,\n      cubeLeft: d,\n      cubeRight: d,\n      cubeFront: d,\n      cubeBack: d,\n      cubeTopBackgroundUrl: '',\n      cubeBottomBackgroundUrl: '',\n      cubeLeftBackgroundUrl: '',\n      cubeRightBackgroundUrl: '',\n      cubeFrontBackgroundUrl: '',\n      cubeBackBackgroundUrl: ''\n    };\n    this.resetElapsedTime = this.resetElapsedTime.bind(this);\n    this.getElapsedTime = this.getElapsedTime.bind(this);\n    this.getBackgroundUrl = this.getBackgroundUrl.bind(this);\n    this.setBackgroundUrl = this.setBackgroundUrl.bind(this);\n    this.getRandomSide = this.getRandomSide.bind(this);\n    this.getRandomLogo = this.getRandomLogo.bind(this);\n    this.repaint = this.repaint.bind(this);\n  }\n\n  componentDidMount() {\n    /*\n        Note: componentDidMount() gets called a half dozen times bc the Home component\n        which instantiates this component itself mounts and unmounts multiple times.\n         we therefore have to keep track of any repaint() threads that we invoke so that \n        we can kill them if necessary.\n     */\n    var self = this;\n\n    if (!this.props.logos.isLoading) {\n      var myTimeout = setTimeout(function () {\n        self.repaint();\n      }, 1000);\n    }\n\n    this.setState({\n      timeout: myTimeout\n    });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timeout);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"logoprop\",\n      className: \"d3-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, this.props.logos.isLoading ? /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d3-cube\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(LogoDiv, {\n      side: \"top\",\n      url: this.getBackgroundUrl(\"top\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(LogoDiv, {\n      side: \"bottom\",\n      url: this.getBackgroundUrl(\"bottom\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(LogoDiv, {\n      side: \"front\",\n      url: this.getBackgroundUrl(\"front\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(LogoDiv, {\n      side: \"back\",\n      url: this.getBackgroundUrl(\"back\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(LogoDiv, {\n      side: \"right\",\n      url: this.getBackgroundUrl(\"right\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(LogoDiv, {\n      side: \"left\",\n      url: this.getBackgroundUrl(\"left\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    })));\n  }\n\n  repaint() {\n    var self = this;\n    setTimeout(function () {\n      const side = self.getRandomSide();\n      const logo = self.getRandomLogo();\n      const elapsed = self.getElapsedTime(side);\n\n      if (side != null && elapsed > 3000) {\n        self.setBackgroundUrl(side, logo);\n      }\n\n      self.repaint();\n    }, 1000 * Math.random());\n  }\n\n  getBackgroundUrl(side) {\n    let retval;\n\n    switch (side) {\n      case \"top\":\n        retval = this.state.cubeTopBackgroundUrl;\n        break;\n\n      case \"bottom\":\n        retval = this.state.cubeBottomBackgroundUrl;\n        break;\n\n      case \"left\":\n        retval = this.state.cubeLeftBackgroundUrl;\n        break;\n\n      case \"right\":\n        retval = this.state.cubeRightBackgroundUrl;\n        break;\n\n      case \"front\":\n        retval = this.state.cubeFrontBackgroundUrl;\n        break;\n\n      case \"back\":\n        retval = this.state.cubeBackBackgroundUrl;\n        break;\n    }\n\n    return retval;\n  }\n\n  setBackgroundUrl(side, url) {\n    let state;\n\n    switch (side) {\n      case \"top\":\n        state = {\n          cubeTopBackgroundUrl: url\n        };\n        break;\n\n      case \"bottom\":\n        state = {\n          cubeBottomBackgroundUrl: url\n        };\n        break;\n\n      case \"left\":\n        state = {\n          cubeLeftBackgroundUrl: url\n        };\n        break;\n\n      case \"right\":\n        state = {\n          cubeRightBackgroundUrl: url\n        };\n        break;\n\n      case \"front\":\n        state = {\n          cubeFrontBackgroundUrl: url\n        };\n        break;\n\n      case \"back\":\n        state = {\n          cubeBackBackgroundUrl: url\n        };\n        break;\n    }\n\n    this.setState(state, () => {\n      this.resetElapsedTime(side);\n    });\n  }\n\n  resetElapsedTime(side) {\n    const d = new Date();\n    let state;\n\n    switch (side) {\n      case \"top\":\n        state = {\n          cubeTop: d\n        };\n        break;\n\n      case \"bottom\":\n        state = {\n          cubeBottom: d\n        };\n        break;\n\n      case \"left\":\n        state = {\n          cubeLeft: d\n        };\n        break;\n\n      case \"right\":\n        state = {\n          cubeRight: d\n        };\n        break;\n\n      case \"front\":\n        state = {\n          cubeFront: d\n        };\n        break;\n\n      case \"back\":\n        state = {\n          cubeBack: d\n        };\n        break;\n    }\n\n    this.setState(state);\n  }\n\n  getElapsedTime(side) {\n    const d = new Date();\n\n    switch (side) {\n      case \"top\":\n        return d - this.state.cubeTop;\n\n      case \"bottom\":\n        return d - this.state.cubeBottom;\n\n      case \"left\":\n        return d - this.state.cubeLeft;\n\n      case \"right\":\n        return d - this.state.cubeRight;\n\n      case \"front\":\n        return d - this.state.cubeFront;\n\n      case \"back\":\n        return d - this.state.cubeBack;\n    }\n  }\n\n  getRandomLogo() {\n    const logo = this.state.logos[Math.floor(Math.random() * this.state.logos.length)];\n    /* \n      we don't want to see the same logo twice.\n      if we have a duplicate logo then we'll use this as an opportunity to \n      create the occasional blank side (no logo).\n     */\n\n    if (logo === this.state.cubeTopBackgroundUrl) {\n      return null;\n    }\n\n    if (logo === this.state.cubeBottomBackgroundUrl) {\n      return null;\n    }\n\n    if (logo === this.state.cubeBackBackgroundUrl) {\n      return null;\n    }\n\n    if (logo === this.state.cubeFrontBackgroundUrl) {\n      return null;\n    }\n\n    if (logo === this.state.cubeLeftBackgroundUrl) {\n      return null;\n    }\n\n    if (logo === this.state.cubeRightBackgroundUrl) {\n      return null;\n    }\n\n    return logo;\n  }\n\n  getRandomSide() {\n    const side = Math.floor(Math.random() * 6);\n\n    switch (side) {\n      case 1:\n        return \"top\";\n\n      case 2:\n        return \"bottom\";\n\n      case 3:\n        return \"left\";\n\n      case 4:\n        return \"right\";\n\n      case 5:\n        return \"front\";\n\n      case 6:\n        return \"back\";\n    }\n  }\n\n}\n\nexport default LogoCube;","map":{"version":3,"sources":["/Users/mcdaniel/github/lpm0073/lawrencemcdaniel.com/site/src/components/logocube/Component.js"],"names":["React","Component","wpGetFeaturedImage","Loading","LogoDiv","props","clsId","side","divId","divStyle","url","console","log","Object","assign","LogoCube","constructor","d","Date","setSeconds","getSeconds","logos","items","map","post","indx","state","timeout","cubeTop","cubeBottom","cubeLeft","cubeRight","cubeFront","cubeBack","cubeTopBackgroundUrl","cubeBottomBackgroundUrl","cubeLeftBackgroundUrl","cubeRightBackgroundUrl","cubeFrontBackgroundUrl","cubeBackBackgroundUrl","resetElapsedTime","bind","getElapsedTime","getBackgroundUrl","setBackgroundUrl","getRandomSide","getRandomLogo","repaint","componentDidMount","self","isLoading","myTimeout","setTimeout","setState","componentWillUnmount","clearTimeout","render","logo","elapsed","Math","random","retval","floor","length"],"mappings":"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","sourcesContent":["/*\n    https://www.smashingmagazine.com/2018/02/react-d3-ecosystem/\n */\nimport React, { Component } from 'react';\nimport { wpGetFeaturedImage } from '../../shared/wpGetFeaturedImage';\nimport './styles.css';\nimport Loading from '../Loading';\n\nconst LogoDiv = (props) => {\n\n    const clsId = \"d3-side \" + props.side;\n    const divId = \"cube-\" + props.side + \"-logo\";\n    const divStyle = {\n        \"background-image\": props.url\n      }\n    console.log(\"LogoDiv()\", props.side, props.url);\n    return(\n        <React.Fragment >\n            <div id={divId} className={clsId}><div>\n                <div className=\"logo\" \n                     style={Object.assign(divStyle)}>\n                </div>\n            </div></div>\n        </React.Fragment>\n    );\n}\nclass LogoCube extends Component {\n\n    constructor(props) {\n        super(props);\n\n        /*\n            Note: one ugly side effect of the randomness in choosing which side to update, and\n            the time at which to update is that, sometimes, the same panel gets chosen very quickly\n            which leads to jerky-looking behavior.\n\n            To prevent this we keep track of how long each logo has been on a given cube side.\n            the repaint() method will only repaint a side if that side has in-state for at least \n            X milliseconds.\n         */\n        var d = new Date();\n        d.setSeconds(d.getSeconds() - 2);\n\n        const logos =  this.props.logos.items.map((post, indx) => {\n            return wpGetFeaturedImage(post, null);\n        });\n\n        this.state = {\n            logos: logos,\n            timeout: null,\n            cubeTop: d,\n            cubeBottom: d,\n            cubeLeft: d,\n            cubeRight: d,\n            cubeFront: d,\n            cubeBack: d,\n\n            cubeTopBackgroundUrl: '',\n            cubeBottomBackgroundUrl: '',\n            cubeLeftBackgroundUrl: '',\n            cubeRightBackgroundUrl: '',\n            cubeFrontBackgroundUrl: '',\n            cubeBackBackgroundUrl: ''\n          };\n\n        this.resetElapsedTime = this.resetElapsedTime.bind(this);\n        this.getElapsedTime = this.getElapsedTime.bind(this);\n        this.getBackgroundUrl = this.getBackgroundUrl.bind(this);\n        this.setBackgroundUrl = this.setBackgroundUrl.bind(this);\n        this.getRandomSide = this.getRandomSide.bind(this);\n        this.getRandomLogo = this.getRandomLogo.bind(this);\n    \n        this.repaint = this.repaint.bind(this);\n        }\n\n\n\n    componentDidMount() {\n        /*\n            Note: componentDidMount() gets called a half dozen times bc the Home component\n            which instantiates this component itself mounts and unmounts multiple times.\n\n            we therefore have to keep track of any repaint() threads that we invoke so that \n            we can kill them if necessary.\n         */\n        var self = this;\n        if (!this.props.logos.isLoading) {\n            var myTimeout = setTimeout(function() {\n                self.repaint();\n            }, 1000);    \n        }\n        this.setState({timeout: myTimeout});\n\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.state.timeout);        \n    }\n    \n    render() {\n\n        return(\n            <div id=\"logoprop\" className=\"d3-container\">\n            {this.props.logos.isLoading ? (\n                <Loading />\n              ) : (\n                <div className=\"d3-cube\">\n                    <LogoDiv side={\"top\"} url={this.getBackgroundUrl(\"top\")} />\n                    <LogoDiv side={\"bottom\"} url={this.getBackgroundUrl(\"bottom\")} />\n                    <LogoDiv side={\"front\"} url={this.getBackgroundUrl(\"front\")} />\n                    <LogoDiv side={\"back\"} url={this.getBackgroundUrl(\"back\")} />\n                    <LogoDiv side={\"right\"} url={this.getBackgroundUrl(\"right\")} />\n                    <LogoDiv side={\"left\"} url={this.getBackgroundUrl(\"left\")} />\n                </div>\n              )}\n            </div>\n        );\n    }\n\n    repaint() {\n        var self = this;\n        \n        setTimeout(function() {\n            const side = self.getRandomSide();\n            const logo = self.getRandomLogo();\n            const elapsed = self.getElapsedTime(side);\n            if (side != null && elapsed > 3000) {\n                self.setBackgroundUrl(side, logo);\n            }\n            self.repaint();\n        }, 1000 * Math.random());   \n      \n    }\n\n\n    getBackgroundUrl(side) {\n        let retval;\n        switch(side) {\n            case \"top\": retval = this.state.cubeTopBackgroundUrl; break;\n            case \"bottom\": retval =  this.state.cubeBottomBackgroundUrl; break;\n            case \"left\": retval =  this.state.cubeLeftBackgroundUrl; break;\n            case \"right\": retval =  this.state.cubeRightBackgroundUrl; break;\n            case \"front\": retval =  this.state.cubeFrontBackgroundUrl; break;\n            case \"back\": retval =  this.state.cubeBackBackgroundUrl; break;\n        }\n        return retval;\n    }\n\n    setBackgroundUrl(side, url) {\n\n        let state;\n        switch(side) {\n            case \"top\": state = {cubeTopBackgroundUrl: url}; break;\n            case \"bottom\": state = {cubeBottomBackgroundUrl: url}; break;\n            case \"left\": state = {cubeLeftBackgroundUrl: url}; break;\n            case \"right\": state = {cubeRightBackgroundUrl: url}; break;\n            case \"front\": state = {cubeFrontBackgroundUrl: url}; break;\n            case \"back\": state = {cubeBackBackgroundUrl: url}; break;\n        }\n        this.setState(state, () => {\n            this.resetElapsedTime(side);\n        });\n\n    }\n\n    resetElapsedTime(side) {\n        const d = new Date();\n        let state;\n        switch(side) {\n            case \"top\": state = {cubeTop: d}; break;\n            case \"bottom\": state = {cubeBottom: d}; break;\n            case \"left\":state = {cubeLeft: d}; break;\n            case \"right\": state = {cubeRight: d}; break;\n            case \"front\": state = {cubeFront: d}; break;\n            case \"back\": state = {cubeBack: d}; break;\n        }\n        this.setState(state);\n\n    }\n\n    getElapsedTime(side) {\n        const d = new Date();\n        switch(side) {\n            case \"top\": return d - this.state.cubeTop;\n            case \"bottom\": return d - this.state.cubeBottom;\n            case \"left\": return d - this.state.cubeLeft;\n            case \"right\": return d - this.state.cubeRight;\n            case \"front\": return d - this.state.cubeFront;\n            case \"back\": return d - this.state.cubeBack;\n        }\n    }\n      \n    getRandomLogo() {\n        const logo = this.state.logos[Math.floor(Math.random() * this.state.logos.length)];\n\n        /* \n          we don't want to see the same logo twice.\n          if we have a duplicate logo then we'll use this as an opportunity to \n          create the occasional blank side (no logo).\n         */\n        if (logo === this.state.cubeTopBackgroundUrl) {return null}\n        if (logo === this.state.cubeBottomBackgroundUrl) {return null}\n        if (logo === this.state.cubeBackBackgroundUrl) {return null}\n        if (logo === this.state.cubeFrontBackgroundUrl) {return null}\n        if (logo === this.state.cubeLeftBackgroundUrl) {return null}\n        if (logo === this.state.cubeRightBackgroundUrl) {return null}\n\n        return logo;\n    }\n\n    \n    getRandomSide() {\n\n        const side = Math.floor(Math.random() * 6);\n        switch(side) {\n            case 1: return \"top\";\n            case 2: return \"bottom\";\n            case 3: return \"left\";\n            case 4: return \"right\";\n            case 5: return \"front\";\n            case 6: return \"back\";\n        }\n    \n    }\n    \n}\n\nexport default LogoCube;\n"]},"metadata":{},"sourceType":"module"}