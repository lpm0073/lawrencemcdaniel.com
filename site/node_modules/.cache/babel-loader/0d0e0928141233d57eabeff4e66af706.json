{"ast":null,"code":"var _jsxFileName = \"/Users/mcdaniel/github/lpm0073/lawrencemcdaniel.com/site/src/components/logocube/Component.js\";\n\n/*\n    https://www.smashingmagazine.com/2018/02/react-d3-ecosystem/\n */\nimport React, { Component } from 'react';\nimport { wpGetFeaturedImage } from '../../shared/wpGetFeaturedImage';\nimport './styles.css';\nimport Loading from '../Loading';\n\nclass LogoCube extends Component {\n  constructor(props) {\n    super(props);\n    /*\n        Note: one ugly side effect of the randomness in choosing which side to update, and\n        the time at which to update is that, sometimes, the same panel gets chosen very quickly\n        which leads to jerky-looking behavior.\n         To prevent this we keep track of how long each logo has been on a given cube side.\n        the repaint() method will only repaint a side if that side has been in the same state \n        for at least X milliseconds.\n     */\n\n    var d = new Date();\n    d.setSeconds(d.getSeconds() - 2);\n    const logos = this.props.logos.items.map((post, indx) => {\n      return wpGetFeaturedImage(post, null);\n    });\n    const featured_logos = this.props.logos.items.filter((post, indx) => {\n      for (var i = 0; i < post.categories.length; i++) {\n        if (post.categories[i] === 48) {\n          /* featured technology */\n          return true;\n        }\n      }\n\n      return false;\n    }).map((featuredPost, indx) => {\n      return wpGetFeaturedImage(featuredPost, null);\n    });\n    this.state = {\n      logos: logos,\n      featured_logos: featured_logos,\n      timeout: null,\n      cubeTop: d,\n      cubeBottom: d,\n      cubeLeft: d,\n      cubeRight: d,\n      cubeFront: d,\n      cubeBack: d,\n      cubeTopBackgroundUrl: null,\n      cubeBottomBackgroundUrl: null,\n      cubeLeftBackgroundUrl: null,\n      cubeRightBackgroundUrl: null,\n      cubeFrontBackgroundUrl: null,\n      cubeBackBackgroundUrl: null\n    };\n    this.resetElapsedTime = this.resetElapsedTime.bind(this);\n    this.getElapsedTime = this.getElapsedTime.bind(this);\n    this.getBackgroundUrl = this.getBackgroundUrl.bind(this);\n    this.setBackgroundUrl = this.setBackgroundUrl.bind(this);\n    this.getRandomSide = this.getRandomSide.bind(this);\n    this.getRandomLogo = this.getRandomLogo.bind(this);\n    this.repaint = this.repaint.bind(this);\n  }\n\n  componentDidMount() {\n    /*\n        Note: componentDidMount() gets called a half dozen times bc the Home component\n        which instantiates this component itself mounts and unmounts multiple times.\n         we therefore delay the first repaint for a while. however\n        we also have to keep track of the repaint() threads that we invoke so that \n        we can kill them in cases where the component mounts and then quickly unmounts.\n     */\n    var self = this;\n\n    if (!this.props.logos.isLoading) {\n      console.log(this.state.featured_logos);\n      this.setBackgroundUrl(\"top\", this.getRandomLogo(this.state.featured_logos));\n      this.setBackgroundUrl(\"bottom\", this.getRandomLogo(this.state.featured_logos));\n      this.setBackgroundUrl(\"left\", this.getRandomLogo(this.state.featured_logos));\n      this.setBackgroundUrl(\"right\", this.getRandomLogo(this.state.featured_logos));\n      this.setBackgroundUrl(\"front\", this.getRandomLogo(this.state.featured_logos));\n      this.setBackgroundUrl(\"back\", this.getRandomLogo(this.state.featured_logos));\n      /*\n          kick off an infinite loop of repaint()\n       */\n\n      var myTimeout = setTimeout(function () {\n        self.repaint();\n      }, 1000);\n    }\n\n    this.setState({\n      timeout: myTimeout\n    });\n  }\n\n  componentWillUnmount() {\n    /*\n        kill any pending repaint() invocation from componentDidMount().\n     */\n    clearTimeout(this.state.timeout);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"logoprop\",\n      className: \"d3-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, this.props.logos.isLoading ? /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d3-cube\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CubeSide, {\n      side: \"top\",\n      url: this.getBackgroundUrl(\"top\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(CubeSide, {\n      side: \"bottom\",\n      url: this.getBackgroundUrl(\"bottom\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(CubeSide, {\n      side: \"front\",\n      url: this.getBackgroundUrl(\"front\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(CubeSide, {\n      side: \"back\",\n      url: this.getBackgroundUrl(\"back\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(CubeSide, {\n      side: \"right\",\n      url: this.getBackgroundUrl(\"right\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(CubeSide, {\n      side: \"left\",\n      url: this.getBackgroundUrl(\"left\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    })));\n  }\n\n  repaint() {\n    var self = this;\n    setTimeout(function () {\n      let logos;\n      const side = self.getRandomSide();\n\n      if (side === \"front\") {\n        logos = self.state.featured_logos;\n      } else {\n        logos = self.state.logos;\n      }\n\n      const logo = self.getRandomLogo(logos);\n      const elapsed = self.getElapsedTime(side);\n\n      if (side != null && elapsed > 3000) {\n        self.setBackgroundUrl(side, logo);\n      }\n\n      self.repaint();\n    }, 1000 * Math.random());\n  }\n\n  getBackgroundUrl(side) {\n    let retval;\n\n    switch (side) {\n      case \"top\":\n        retval = this.state.cubeTopBackgroundUrl;\n        break;\n\n      case \"bottom\":\n        retval = this.state.cubeBottomBackgroundUrl;\n        break;\n\n      case \"left\":\n        retval = this.state.cubeLeftBackgroundUrl;\n        break;\n\n      case \"right\":\n        retval = this.state.cubeRightBackgroundUrl;\n        break;\n\n      case \"front\":\n        retval = this.state.cubeFrontBackgroundUrl;\n        break;\n\n      case \"back\":\n        retval = this.state.cubeBackBackgroundUrl;\n        break;\n    }\n\n    return retval;\n  }\n\n  setBackgroundUrl(side, url) {\n    let state;\n\n    switch (side) {\n      case \"top\":\n        state = {\n          cubeTopBackgroundUrl: url\n        };\n        break;\n\n      case \"bottom\":\n        state = {\n          cubeBottomBackgroundUrl: url\n        };\n        break;\n\n      case \"left\":\n        state = {\n          cubeLeftBackgroundUrl: url\n        };\n        break;\n\n      case \"right\":\n        state = {\n          cubeRightBackgroundUrl: url\n        };\n        break;\n\n      case \"front\":\n        state = {\n          cubeFrontBackgroundUrl: url\n        };\n        break;\n\n      case \"back\":\n        state = {\n          cubeBackBackgroundUrl: url\n        };\n        break;\n    }\n\n    this.setState(state, () => {\n      this.resetElapsedTime(side);\n    });\n  }\n\n  resetElapsedTime(side) {\n    const d = new Date();\n    let state;\n\n    switch (side) {\n      case \"top\":\n        state = {\n          cubeTop: d\n        };\n        break;\n\n      case \"bottom\":\n        state = {\n          cubeBottom: d\n        };\n        break;\n\n      case \"left\":\n        state = {\n          cubeLeft: d\n        };\n        break;\n\n      case \"right\":\n        state = {\n          cubeRight: d\n        };\n        break;\n\n      case \"front\":\n        state = {\n          cubeFront: d\n        };\n        break;\n\n      case \"back\":\n        state = {\n          cubeBack: d\n        };\n        break;\n    }\n\n    this.setState(state);\n  }\n\n  getElapsedTime(side) {\n    const d = new Date();\n\n    switch (side) {\n      case \"top\":\n        return d - this.state.cubeTop;\n\n      case \"bottom\":\n        return d - this.state.cubeBottom;\n\n      case \"left\":\n        return d - this.state.cubeLeft;\n\n      case \"right\":\n        return d - this.state.cubeRight;\n\n      case \"front\":\n        return d - this.state.cubeFront;\n\n      case \"back\":\n        return d - this.state.cubeBack;\n    }\n  }\n\n  getRandomLogo(logos) {\n    /*\n        choose a random logo\n    */\n    const logo = logos[Math.floor(Math.random() * logos.length)];\n    /* \n      we don't want to see the same logo twice, so if we got a duplicate then\n      reshuffle.\n     */\n\n    if (logo.equals(this.state.cubeTopBackgroundUrl)) {\n      return this.getRandomLogo(logos);\n    }\n\n    if (logo.equals(this.state.cubeBottomBackgroundUrl)) {\n      return this.getRandomLogo(logos);\n    }\n\n    if (logo.equals(this.state.cubeBackBackgroundUrl)) {\n      return this.getRandomLogo(logos);\n    }\n\n    if (logo.equals(this.state.cubeFrontBackgroundUrl)) {\n      return this.getRandomLogo(logos);\n    }\n\n    if (logo.equals(this.state.cubeLeftBackgroundUrl)) {\n      return this.getRandomLogo(logos);\n    }\n\n    if (logo.equals(this.state.cubeRightBackgroundUrl)) {\n      return this.getRandomLogo(logos);\n    }\n\n    return logo;\n  }\n\n  getRandomSide() {\n    const side = Math.floor(Math.random() * 6);\n\n    switch (side) {\n      case 0:\n        return \"top\";\n\n      case 1:\n        return \"bottom\";\n\n      case 2:\n        return \"left\";\n\n      case 3:\n        return \"right\";\n\n      case 4:\n        return \"front\";\n\n      case 5:\n        return \"back\";\n    }\n  }\n\n}\n\nexport default LogoCube;\n\nconst CubeSide = props => {\n  const clsId = \"d3-side \" + props.side;\n  const divId = \"cube-\" + props.side + \"-logo\";\n  const divStyle = {\n    backgroundImage: \"url('\" + props.url + \"')\"\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: clsId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 36\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    key: divId,\n    className: \"logo\",\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 17\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/mcdaniel/github/lpm0073/lawrencemcdaniel.com/site/src/components/logocube/Component.js"],"names":["React","Component","wpGetFeaturedImage","Loading","LogoCube","constructor","props","d","Date","setSeconds","getSeconds","logos","items","map","post","indx","featured_logos","filter","i","categories","length","featuredPost","state","timeout","cubeTop","cubeBottom","cubeLeft","cubeRight","cubeFront","cubeBack","cubeTopBackgroundUrl","cubeBottomBackgroundUrl","cubeLeftBackgroundUrl","cubeRightBackgroundUrl","cubeFrontBackgroundUrl","cubeBackBackgroundUrl","resetElapsedTime","bind","getElapsedTime","getBackgroundUrl","setBackgroundUrl","getRandomSide","getRandomLogo","repaint","componentDidMount","self","isLoading","console","log","myTimeout","setTimeout","setState","componentWillUnmount","clearTimeout","render","side","logo","elapsed","Math","random","retval","url","floor","equals","CubeSide","clsId","divId","divStyle","backgroundImage"],"mappings":"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","sourcesContent":["/*\n    https://www.smashingmagazine.com/2018/02/react-d3-ecosystem/\n */\nimport React, { Component } from 'react';\nimport { wpGetFeaturedImage } from '../../shared/wpGetFeaturedImage';\nimport './styles.css';\nimport Loading from '../Loading';\n\n\nclass LogoCube extends Component {\n\n    constructor(props) {\n        super(props);\n\n        /*\n            Note: one ugly side effect of the randomness in choosing which side to update, and\n            the time at which to update is that, sometimes, the same panel gets chosen very quickly\n            which leads to jerky-looking behavior.\n\n            To prevent this we keep track of how long each logo has been on a given cube side.\n            the repaint() method will only repaint a side if that side has been in the same state \n            for at least X milliseconds.\n         */\n        var d = new Date();\n        d.setSeconds(d.getSeconds() - 2);\n\n        const logos =  this.props.logos.items.map((post, indx) => {\n            return wpGetFeaturedImage(post, null);\n        });\n\n        const featured_logos =  this.props.logos.items.filter((post, indx) => {\n            for (var i=0 ; i < post.categories.length ; i++) {\n                if (post.categories[i] === 48) {  /* featured technology */\n                    return true;\n                }\n            }\n            return false;\n        }).map((featuredPost, indx) => {\n            return wpGetFeaturedImage(featuredPost, null);\n        });\n\n        this.state = {\n            logos: logos,\n            featured_logos: featured_logos,\n            timeout: null,\n            cubeTop: d,\n            cubeBottom: d,\n            cubeLeft: d,\n            cubeRight: d,\n            cubeFront: d,\n            cubeBack: d,\n\n            cubeTopBackgroundUrl: null,\n            cubeBottomBackgroundUrl: null,\n            cubeLeftBackgroundUrl: null,\n            cubeRightBackgroundUrl: null,\n            cubeFrontBackgroundUrl: null,\n            cubeBackBackgroundUrl: null\n          };\n\n        this.resetElapsedTime = this.resetElapsedTime.bind(this);\n        this.getElapsedTime = this.getElapsedTime.bind(this);\n        this.getBackgroundUrl = this.getBackgroundUrl.bind(this);\n        this.setBackgroundUrl = this.setBackgroundUrl.bind(this);\n        this.getRandomSide = this.getRandomSide.bind(this);\n        this.getRandomLogo = this.getRandomLogo.bind(this);\n    \n        this.repaint = this.repaint.bind(this);\n        }\n\n\n    componentDidMount() {\n        /*\n            Note: componentDidMount() gets called a half dozen times bc the Home component\n            which instantiates this component itself mounts and unmounts multiple times.\n\n            we therefore delay the first repaint for a while. however\n            we also have to keep track of the repaint() threads that we invoke so that \n            we can kill them in cases where the component mounts and then quickly unmounts.\n         */\n        var self = this;\n        if (!this.props.logos.isLoading) {\n\n            console.log(this.state.featured_logos);\n\n            this.setBackgroundUrl(\"top\", this.getRandomLogo(this.state.featured_logos));                \n            this.setBackgroundUrl(\"bottom\", this.getRandomLogo(this.state.featured_logos));                \n            this.setBackgroundUrl(\"left\", this.getRandomLogo(this.state.featured_logos));                \n            this.setBackgroundUrl(\"right\", this.getRandomLogo(this.state.featured_logos));                \n            this.setBackgroundUrl(\"front\", this.getRandomLogo(this.state.featured_logos));                \n            this.setBackgroundUrl(\"back\", this.getRandomLogo(this.state.featured_logos));                \n\n            /*\n                kick off an infinite loop of repaint()\n             */\n            var myTimeout = setTimeout(function() {\n                self.repaint();\n            }, 1000);    \n        }\n        this.setState({timeout: myTimeout});\n\n    }\n\n    componentWillUnmount() {\n        /*\n            kill any pending repaint() invocation from componentDidMount().\n         */\n        clearTimeout(this.state.timeout);        \n    }\n    \n    render() {\n\n        return(\n            <div id=\"logoprop\" className=\"d3-container\">\n            {this.props.logos.isLoading ? (\n                <Loading />\n              ) : (\n                <div className=\"d3-cube\">\n                    <CubeSide side={\"top\"} url={this.getBackgroundUrl(\"top\")} />\n                    <CubeSide side={\"bottom\"} url={this.getBackgroundUrl(\"bottom\")} />\n                    <CubeSide side={\"front\"} url={this.getBackgroundUrl(\"front\")} />\n                    <CubeSide side={\"back\"} url={this.getBackgroundUrl(\"back\")} />\n                    <CubeSide side={\"right\"} url={this.getBackgroundUrl(\"right\")} />\n                    <CubeSide side={\"left\"} url={this.getBackgroundUrl(\"left\")} />\n                </div>\n              )}\n            </div>\n        );\n    }\n\n    repaint() {\n        var self = this;\n        \n        setTimeout(function() {\n            let logos;\n            const side = self.getRandomSide();\n            if (side === \"front\") {\n                logos = self.state.featured_logos;\n            } else {\n                logos = self.state.logos;\n            }\n            const logo = self.getRandomLogo(logos);\n            const elapsed = self.getElapsedTime(side);\n            if (side != null && elapsed > 3000) {\n                self.setBackgroundUrl(side, logo);\n            }\n            self.repaint();\n        }, 1000 * Math.random());   \n      \n    }\n\n\n    getBackgroundUrl(side) {\n        let retval;\n        switch(side) {\n            case \"top\": retval = this.state.cubeTopBackgroundUrl; break;\n            case \"bottom\": retval =  this.state.cubeBottomBackgroundUrl; break;\n            case \"left\": retval =  this.state.cubeLeftBackgroundUrl; break;\n            case \"right\": retval =  this.state.cubeRightBackgroundUrl; break;\n            case \"front\": retval =  this.state.cubeFrontBackgroundUrl; break;\n            case \"back\": retval =  this.state.cubeBackBackgroundUrl; break;\n        }\n        return retval;\n    }\n\n    setBackgroundUrl(side, url) {\n\n        let state;\n        switch(side) {\n            case \"top\": state = {cubeTopBackgroundUrl: url}; break;\n            case \"bottom\": state = {cubeBottomBackgroundUrl: url}; break;\n            case \"left\": state = {cubeLeftBackgroundUrl: url}; break;\n            case \"right\": state = {cubeRightBackgroundUrl: url}; break;\n            case \"front\": state = {cubeFrontBackgroundUrl: url}; break;\n            case \"back\": state = {cubeBackBackgroundUrl: url}; break;\n        }\n        this.setState(state, () => {\n            this.resetElapsedTime(side);\n        });\n\n    }\n\n    resetElapsedTime(side) {\n        const d = new Date();\n        let state;\n        switch(side) {\n            case \"top\": state = {cubeTop: d}; break;\n            case \"bottom\": state = {cubeBottom: d}; break;\n            case \"left\":state = {cubeLeft: d}; break;\n            case \"right\": state = {cubeRight: d}; break;\n            case \"front\": state = {cubeFront: d}; break;\n            case \"back\": state = {cubeBack: d}; break;\n        }\n        this.setState(state);\n\n    }\n\n    getElapsedTime(side) {\n        const d = new Date();\n        switch(side) {\n            case \"top\": return d - this.state.cubeTop;\n            case \"bottom\": return d - this.state.cubeBottom;\n            case \"left\": return d - this.state.cubeLeft;\n            case \"right\": return d - this.state.cubeRight;\n            case \"front\": return d - this.state.cubeFront;\n            case \"back\": return d - this.state.cubeBack;\n        }\n    }\n      \n    getRandomLogo(logos) {\n        /*\n            choose a random logo\n        */\n        const logo = logos[Math.floor(Math.random() * logos.length)];\n\n        /* \n          we don't want to see the same logo twice, so if we got a duplicate then\n          reshuffle.\n         */\n        if (logo.equals(this.state.cubeTopBackgroundUrl)) {return this.getRandomLogo(logos)}\n        if (logo.equals(this.state.cubeBottomBackgroundUrl)) {return this.getRandomLogo(logos)}\n        if (logo.equals(this.state.cubeBackBackgroundUrl)) {return this.getRandomLogo(logos)}\n        if (logo.equals(this.state.cubeFrontBackgroundUrl)) {return this.getRandomLogo(logos)}\n        if (logo.equals(this.state.cubeLeftBackgroundUrl)) {return this.getRandomLogo(logos)}\n        if (logo.equals(this.state.cubeRightBackgroundUrl)) {return this.getRandomLogo(logos)}\n\n        return logo;\n    }\n\n    \n    getRandomSide() {\n\n        const side = Math.floor(Math.random() * 6);\n        switch(side) {\n            case 0: return \"top\";\n            case 1: return \"bottom\";\n            case 2: return \"left\";\n            case 3: return \"right\";\n            case 4: return \"front\";\n            case 5: return \"back\";\n        }\n    \n    }\n    \n}\n\nexport default LogoCube;\n\nconst CubeSide = (props) => {\n\n    const clsId = \"d3-side \" + props.side;\n    const divId = \"cube-\" + props.side + \"-logo\";\n    const divStyle = {\n        backgroundImage: \"url('\" + props.url + \"')\"\n      }\n\n    return(\n        <React.Fragment >\n            <div className={clsId}><div>\n                <div key={divId} \n                     className=\"logo\" \n                     style={divStyle}>\n                </div>\n            </div></div>\n        </React.Fragment>\n    );\n}"]},"metadata":{},"sourceType":"module"}