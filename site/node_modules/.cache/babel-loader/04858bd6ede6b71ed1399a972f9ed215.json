{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\n/* ----------------------------------- */\n\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('Post comments ', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\n/* ----------------------------------- */\n\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading(true));\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promotions => dispatch(addPromos(promotions))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\n/* ----------------------------------- */\n\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading(true));\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});","map":{"version":3,"sources":["/Users/mcdaniel/github/lpm0073/coursera-react/confusion/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","fetchDishes","dispatch","dishesLoading","fetch","then","response","ok","error","Error","status","statusText","errmess","message","json","dishes","addDishes","catch","dishesFailed","type","DISHES_LOADING","DISHES_FAILED","payload","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","addComment","comment","ADD_COMMENT","postComment","dishId","rating","author","newComment","date","Date","toISOString","method","body","JSON","stringify","headers","credentials","console","log","alert","fetchPromos","promosLoading","promotions","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","promos","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\nexport const fetchDishes = () => (dispatch) => {\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + 'dishes')\n        .then(\n            response => {\n                if (response.ok) {\n                    return response;\n                } else {\n                    var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                    error.response = response;\n                    throw error;\n                }\n            },\n            error => {\n                var errmess = new Error(error.message);\n                throw errmess;\n            })\n        .then(response => response.json())\n        .then(dishes => dispatch(addDishes(dishes)))\n        .catch(error => dispatch(dishesFailed(error.message)));\n\n}\n\nexport const dishesLoading = () => ({\n    type: ActionTypes.DISHES_LOADING\n});\n\nexport const dishesFailed = (errmess) => ({\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess\n});\n\nexport const addDishes = (dishes) => ({\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n});\n\n/* ----------------------------------- */\nexport const fetchComments = () => (dispatch) => {\n\n    return fetch(baseUrl + 'comments')\n    .then(\n        response => {\n            if (response.ok) {\n                return response;\n            } else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n    \n}\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\n\nexport const addComment = (comment) => ({\n    type: ActionTypes.ADD_COMMENT,\n    payload: comment\n});\n\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\n\n        const newComment = {\n            dishId: dishId,\n            rating: rating,\n            author: author,\n            comment: comment\n        }\n        newComment.date = new Date().toISOString();\n\n        return fetch(baseUrl + 'comments', {\n            method: 'POST',\n            body: JSON.stringify(newComment),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            credentials: 'same-origin'\n        })\n        .then(\n            response => {\n                if (response.ok) {\n                    return response;\n                } else {\n                    var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                    error.response = response;\n                    throw error;\n                }\n            },\n            error => {\n                var errmess = new Error(error.message);\n                throw errmess;\n            }\n\n        )\n        .then(response => response.json())\n        .then(response => dispatch(addComment(response)))\n        .catch(error => { \n            console.log('Post comments ', error.message);\n            alert('Your comment could not be posted\\nError: ' + error.message);\n        });\n    \n}\n/* ----------------------------------- */\n\nexport const fetchPromos = () => (dispatch) => {\n    dispatch(promosLoading(true));\n\n    return fetch(baseUrl + 'promotions')\n    .then(\n        response => {\n            if (response.ok) {\n                return response;\n            } else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n    .then(response => response.json())\n    .then(promotions => dispatch(addPromos(promotions)))\n    .catch(error => dispatch(promosFailed(error.message)));\n\n\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});\n\n/* ----------------------------------- */\n\nexport const fetchLeaders = () => (dispatch) => {\n    dispatch(leadersLoading(true));\n\n    return fetch(baseUrl + 'leaders')\n    .then(\n        response => {\n            if (response.ok) {\n                return response;\n            } else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n    .then(response => response.json())\n    .then(leaders => dispatch(addLeaders(leaders)))\n    .catch(error => dispatch(leadersFailed(error.message)));\n\n\n}\n\nexport const leadersLoading = () => ({\n    type: ActionTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = (errmess) => ({\n    type: ActionTypes.LEADERS_FAILED,\n    payload: errmess\n});\n\nexport const addLeaders = (leaders) => ({\n    type: ActionTypes.ADD_LEADERS,\n    payload: leaders\n});\n\n"]},"metadata":{},"sourceType":"module"}