{"ast":null,"code":"import * as ActionTypes from \"./ActionTypes\";\nimport { baseUrl } from \"../shared/baseUrl\";\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + \"comments\", {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log(\"post comments\", error.message);\n    alert(\"Your comment could not be posted\\nError: \" + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading());\n  return fetch(baseUrl + \"dishes\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + \"comments\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + \"promotions\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading());\n  return fetch(baseUrl + \"leaders\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\nexport const postFeedback = (firstname, lastname, telnum, email, agree, contactType, message) => dispatch => {\n  const newFeedback = {\n    firstname: firstname,\n    lastname: lastname,\n    telnum: telnum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  };\n  return fetch(baseUrl + \"feedback\", {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error(\"Error \" + response.status + \": \" + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => alert(\"Thank you for your feedback!\" + JSON.stringify(response))).catch(error => {\n    console.log(\"post feedbacks\", error.message);\n    alert(\"Your feedback could not be posted\\nError: \" + error.message);\n  });\n};","map":{"version":3,"sources":["/Users/mcdaniel/github/lpm0073/coursera-react/confusion/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","catch","console","log","message","alert","fetchDishes","dishesLoading","errmess","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS","postFeedback","firstname","lastname","telnum","email","agree","contactType","newFeedback"],"mappings":"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","sourcesContent":["import * as ActionTypes from \"./ActionTypes\";\nimport { baseUrl } from \"../shared/baseUrl\";\n\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\n\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n\n  return fetch(baseUrl + \"comments\", {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  })\n    .then(\n      response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error(\n            \"Error \" + response.status + \": \" + response.statusText\n          );\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n        throw error;\n      }\n    )\n    .then(response => response.json())\n    .then(response => dispatch(addComment(response)))\n    .catch(error => {\n      console.log(\"post comments\", error.message);\n      alert(\"Your comment could not be posted\\nError: \" + error.message);\n    });\n};\n\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading());\n\n  return fetch(baseUrl + \"dishes\")\n    .then(\n      response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error(\n            \"Error \" + response.status + \": \" + response.statusText\n          );\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      }\n    )\n    .then(response => response.json())\n    .then(dishes => dispatch(addDishes(dishes)))\n    .catch(error => dispatch(dishesFailed(error.message)));\n};\n\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\n\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\n\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\n\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + \"comments\")\n    .then(\n      response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error(\n            \"Error \" + response.status + \": \" + response.statusText\n          );\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      }\n    )\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n};\n\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\n\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\n\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n\n  return fetch(baseUrl + \"promotions\")\n    .then(\n      response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error(\n            \"Error \" + response.status + \": \" + response.statusText\n          );\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      }\n    )\n    .then(response => response.json())\n    .then(promos => dispatch(addPromos(promos)))\n    .catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\n\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\n\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading());\n\n  return fetch(baseUrl + \"leaders\")\n    .then(\n      response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error(\n            \"Error \" + response.status + \": \" + response.statusText\n          );\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      }\n    )\n    .then(response => response.json())\n    .then(leaders => dispatch(addLeaders(leaders)))\n    .catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\n\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\n\nexport const postFeedback = (\n  firstname,\n  lastname,\n  telnum,\n  email,\n  agree,\n  contactType,\n  message\n) => dispatch => {\n  const newFeedback = {\n    firstname: firstname,\n    lastname: lastname,\n    telnum: telnum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  };\n\n  return fetch(baseUrl + \"feedback\", {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  })\n    .then(\n      response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error(\n            \"Error \" + response.status + \": \" + response.statusText\n          );\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n        throw error;\n      }\n    )\n    .then(response => response.json())\n    .then(response =>\n      alert(\"Thank you for your feedback!\" + JSON.stringify(response))\n    )\n    .catch(error => {\n      console.log(\"post feedbacks\", error.message);\n      alert(\"Your feedback could not be posted\\nError: \" + error.message);\n    });\n};"]},"metadata":{},"sourceType":"module"}