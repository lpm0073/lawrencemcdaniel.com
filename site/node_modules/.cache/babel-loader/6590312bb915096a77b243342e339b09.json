{"ast":null,"code":"import { getPixelRatio } from './getPixelRatio';\n\nconst drawCircle = ref => {\n  let canvas = ref.current;\n  let context = canvas.getContext('2d');\n  let ratio = getPixelRatio(context);\n  let width = getComputedStyle(canvas).getPropertyValue('width').slice(0, -2);\n  let height = getComputedStyle(canvas).getPropertyValue('height').slice(0, -2);\n  canvas.width = width * ratio;\n  canvas.height = height * ratio;\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n  context.lineWidth = canvas.height;\n  context.strokeStyle = '#555';\n  context.shadowOffsetX = 0;\n  context.shadowOffsetY = 0;\n  context.shadowBlur = 0;\n  context.shadowColor = '#656565';\n  var x = canvas.width;\n  var y = canvas.height;\n  var endPercent = 100;\n  var i = 0;\n  let requestId;\n\n  const render = pct => {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.beginPath();\n    context.moveTo(0, y);\n    context.lineTo(x * pct, 0);\n    context.stroke();\n    i += 2;\n\n    if (i <= endPercent) {\n      requestId = requestAnimationFrame(function () {\n        render(i / 100);\n      });\n    }\n  };\n\n  setTimeout(function () {\n    render();\n  }, Math.random() * 300);\n  return () => {\n    cancelAnimationFrame(requestId);\n  };\n};\n\nexport default drawCircle;","map":{"version":3,"sources":["/Users/mcdaniel/github/lpm0073/lawrencemcdaniel.com/site/src/pages/skills/drawBar.js"],"names":["getPixelRatio","drawCircle","ref","canvas","current","context","getContext","ratio","width","getComputedStyle","getPropertyValue","slice","height","style","lineWidth","strokeStyle","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","x","y","endPercent","i","requestId","render","pct","clearRect","beginPath","moveTo","lineTo","stroke","requestAnimationFrame","setTimeout","Math","random","cancelAnimationFrame"],"mappings":"AAAA,SAASA,aAAT,QAA8B,iBAA9B;;AAEA,MAAMC,UAAU,GAAIC,GAAD,IAAS;AACxB,MAAIC,MAAM,GAAGD,GAAG,CAACE,OAAjB;AACA,MAAIC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAd;AAEA,MAAIC,KAAK,GAAGP,aAAa,CAACK,OAAD,CAAzB;AACA,MAAIG,KAAK,GAAGC,gBAAgB,CAACN,MAAD,CAAhB,CAAyBO,gBAAzB,CAA0C,OAA1C,EAAmDC,KAAnD,CAAyD,CAAzD,EAA4D,CAAC,CAA7D,CAAZ;AACA,MAAIC,MAAM,GAAGH,gBAAgB,CAACN,MAAD,CAAhB,CAAyBO,gBAAzB,CAA0C,QAA1C,EAAoDC,KAApD,CAA0D,CAA1D,EAA6D,CAAC,CAA9D,CAAb;AAEAR,EAAAA,MAAM,CAACK,KAAP,GAAeA,KAAK,GAAGD,KAAvB;AACAJ,EAAAA,MAAM,CAACS,MAAP,GAAgBA,MAAM,GAAGL,KAAzB;AACAJ,EAAAA,MAAM,CAACU,KAAP,CAAaL,KAAb,GAAsB,GAAEA,KAAM,IAA9B;AACAL,EAAAA,MAAM,CAACU,KAAP,CAAaD,MAAb,GAAuB,GAAEA,MAAO,IAAhC;AAEAP,EAAAA,OAAO,CAACS,SAAR,GAAoBX,MAAM,CAACS,MAA3B;AACAP,EAAAA,OAAO,CAACU,WAAR,GAAsB,MAAtB;AACAV,EAAAA,OAAO,CAACW,aAAR,GAAwB,CAAxB;AACAX,EAAAA,OAAO,CAACY,aAAR,GAAwB,CAAxB;AACAZ,EAAAA,OAAO,CAACa,UAAR,GAAqB,CAArB;AACAb,EAAAA,OAAO,CAACc,WAAR,GAAsB,SAAtB;AAGA,MAAIC,CAAC,GAAGjB,MAAM,CAACK,KAAf;AACA,MAAIa,CAAC,GAAGlB,MAAM,CAACS,MAAf;AACA,MAAIU,UAAU,GAAG,GAAjB;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,SAAJ;;AAEA,QAAMC,MAAM,GAAIC,GAAD,IAAS;AAEpBrB,IAAAA,OAAO,CAACsB,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBxB,MAAM,CAACK,KAA/B,EAAsCL,MAAM,CAACS,MAA7C;AACAP,IAAAA,OAAO,CAACuB,SAAR;AAEAvB,IAAAA,OAAO,CAACwB,MAAR,CAAe,CAAf,EAAkBR,CAAlB;AACAhB,IAAAA,OAAO,CAACyB,MAAR,CAAeV,CAAC,GAAGM,GAAnB,EAAwB,CAAxB;AAEArB,IAAAA,OAAO,CAAC0B,MAAR;AACAR,IAAAA,CAAC,IAAG,CAAJ;;AAEA,QAAIA,CAAC,IAAID,UAAT,EAAqB;AACjBE,MAAAA,SAAS,GAAGQ,qBAAqB,CAAC,YAAY;AAC1CP,QAAAA,MAAM,CAACF,CAAC,GAAG,GAAL,CAAN;AACH,OAFgC,CAAjC;AAGH;AAEJ,GAjBD;;AAmBAU,EAAAA,UAAU,CAAC,YAAW;AAClBR,IAAAA,MAAM;AACT,GAFS,EAEPS,IAAI,CAACC,MAAL,KAAgB,GAFT,CAAV;AAKA,SAAO,MAAM;AACTC,IAAAA,oBAAoB,CAACZ,SAAD,CAApB;AACH,GAFD;AAIH,CAvDD;;AAyDA,eAAevB,UAAf","sourcesContent":["import { getPixelRatio } from './getPixelRatio';\n\nconst drawCircle = (ref) => {\n    let canvas = ref.current;\n    let context = canvas.getContext('2d');\n    \n    let ratio = getPixelRatio(context);\n    let width = getComputedStyle(canvas).getPropertyValue('width').slice(0, -2);\n    let height = getComputedStyle(canvas).getPropertyValue('height').slice(0, -2);\n            \n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    context.lineWidth = canvas.height;\n    context.strokeStyle = '#555';\n    context.shadowOffsetX = 0;\n    context.shadowOffsetY = 0;\n    context.shadowBlur = 0;\n    context.shadowColor = '#656565';\n    \n\n    var x = canvas.width;\n    var y = canvas.height;\n    var endPercent = 100;\n    var i = 0;\n    let requestId;\n\n    const render = (pct) => {\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.beginPath();\n\n        context.moveTo(0, y);\n        context.lineTo(x * pct, 0);\n    \n        context.stroke();\n        i +=2;\n    \n        if (i <= endPercent) {\n            requestId = requestAnimationFrame(function () {\n                render(i / 100)\n            });\n        }\n    \n    };\n\n    setTimeout(function() { \n        render(); \n    }, Math.random() * 300);\n    \n\n    return () => {\n        cancelAnimationFrame(requestId);\n    };\n\n};\n\nexport default drawCircle;"]},"metadata":{},"sourceType":"module"}