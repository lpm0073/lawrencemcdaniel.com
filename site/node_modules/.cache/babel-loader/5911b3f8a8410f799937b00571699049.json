{"ast":null,"code":"const getPixelRatio = context => {\n  var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n  return (window.devicePixelRatio || 1) / backingStore;\n};\n\nconst drawCircle = ref => {\n  let canvas = ref.current;\n  let context = canvas.getContext('2d');\n  let ratio = getPixelRatio(context);\n  let width = getComputedStyle(canvas).getPropertyValue('width').slice(0, -2);\n  let height = getComputedStyle(canvas).getPropertyValue('height').slice(0, -2);\n  canvas.width = width * ratio;\n  canvas.height = height * ratio;\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n  context.lineWidth = 10;\n  context.strokeStyle = '#555';\n  context.shadowOffsetX = 0;\n  context.shadowOffsetY = 0;\n  context.shadowBlur = 0;\n  context.shadowColor = '#656565';\n  var x = canvas.width / 2;\n  var y = canvas.height / 2;\n  var radius = x - context.lineWidth;\n  var endPercent = 100;\n  var circ = Math.PI * 2;\n  var quart = Math.PI / 2;\n  let requestId,\n      i = 0;\n\n  const render = current => {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.beginPath();\n    context.arc(x, y, radius, -quart, circ * current - quart, false);\n    /*\n    context.arc(x, y, x * Math.abs(Math.cos(i)), 0, 2 * Math.PI);\n    context.fill();\n    */\n\n    context.stroke();\n    i += 2;\n\n    if (i <= endPercent) {\n      requestId = requestAnimationFrame(function () {\n        render(i / 100);\n      });\n    }\n  };\n\n  setTimeout(function () {\n    render();\n  }, Math.random() * 300);\n  return () => {\n    cancelAnimationFrame(requestId);\n  };\n};\n\nexport default drawCircle;","map":{"version":3,"sources":["/Users/mcdaniel/github/lpm0073/lawrencemcdaniel.com/site/src/pages/skills/drawCircle.js"],"names":["getPixelRatio","context","backingStore","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","window","devicePixelRatio","drawCircle","ref","canvas","current","getContext","ratio","width","getComputedStyle","getPropertyValue","slice","height","style","lineWidth","strokeStyle","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","x","y","radius","endPercent","circ","Math","PI","quart","requestId","i","render","clearRect","beginPath","arc","stroke","requestAnimationFrame","setTimeout","random","cancelAnimationFrame"],"mappings":"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","sourcesContent":["\nconst getPixelRatio = context => {\n    var backingStore = context.backingStorePixelRatio ||\n                        context.webkitBackingStorePixelRatio ||\n                        context.mozBackingStorePixelRatio ||\n                        context.msBackingStorePixelRatio ||\n                        context.oBackingStorePixelRatio ||\n                        context.backingStorePixelRatio || \n                        1;\n    \n    return (window.devicePixelRatio || 1) / backingStore;\n    }\n\nconst drawCircle = (ref) => {\n    let canvas = ref.current;\n    let context = canvas.getContext('2d');\n    \n    let ratio = getPixelRatio(context);\n    let width = getComputedStyle(canvas)\n        .getPropertyValue('width')\n        .slice(0, -2);\n    let height = getComputedStyle(canvas)\n        .getPropertyValue('height')\n        .slice(0, -2);\n            \n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    context.lineWidth = 10;\n    context.strokeStyle = '#555';\n    context.shadowOffsetX = 0;\n    context.shadowOffsetY = 0;\n    context.shadowBlur = 0;\n    context.shadowColor = '#656565';\n    \n\n    var x = canvas.width / 2;\n    var y = canvas.height / 2;\n\n    var radius = x - context.lineWidth;\n    var endPercent = 100;\n    var circ = Math.PI * 2;\n    var quart = Math.PI / 2;\n\n    let requestId, i = 0;\n\n    const render = (current) => {\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.beginPath();\n        context.arc(x, y, radius, -(quart), (circ * current) - quart, false);\n        /*\n        context.arc(x, y, x * Math.abs(Math.cos(i)), 0, 2 * Math.PI);\n        context.fill();\n        */\n        context.stroke();\n        i +=2;\n    \n        if (i <= endPercent) {\n            requestId = requestAnimationFrame(function () {\n                render(i / 100)\n            });\n        }\n    \n    };\n\n    setTimeout(function(){ render(); }, Math.random() * 300);\n    \n\n    return () => {\n        cancelAnimationFrame(requestId);\n    };\n\n};\n\nexport default drawCircle;"]},"metadata":{},"sourceType":"module"}