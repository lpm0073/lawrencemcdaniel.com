{"ast":null,"code":"var _jsxFileName = \"/Users/mcdaniel/github/lpm0073/lawrencemcdaniel.com/site/src/components/logoCube/Component.js\";\n\n/*\n    https://www.smashingmagazine.com/2018/02/react-d3-ecosystem/\n */\nimport React, { Component } from 'react';\nimport { wpGetFeaturedImage } from '../../shared/wpGetFeaturedImage';\nimport './styles.css';\nimport Loading from '../Loading';\n\nclass LogoCube extends Component {\n  constructor(props) {\n    super(props);\n    /*\n        Note: one ugly side effect of the randomness in choosing which side to update, and\n        the time at which to update is that, sometimes, the same panel gets chosen very quickly\n        which leads to jerky-looking behavior.\n         To prevent this we keep track of how long each logo has been on a given cube side.\n        the repaint() method will only repaint a side if that side has been in the same state \n        for at least X milliseconds.\n     */\n\n    var d = new Date();\n    const logos = this.props.logos.items.map((post, indx) => {\n      return wpGetFeaturedImage(post, null);\n    });\n    const featured_logos = this.props.logos.items.filter((post, indx) => {\n      for (var i = 0; i < post.categories.length; i++) {\n        if (post.categories[i] === 48) {\n          /* featured technology */\n          return true;\n        }\n      }\n\n      return false;\n    }).map((featuredPost, indx) => {\n      return wpGetFeaturedImage(featuredPost, null);\n    });\n    this.state = {\n      logos: logos,\n      featured_logos: featured_logos,\n      repaintDelay: null,\n      logosDelay: null,\n      shouldUpdate: false,\n      constructed: d,\n      cubeTop: d,\n      cubeBottom: d,\n      cubeLeft: d,\n      cubeRight: d,\n      cubeFront: d,\n      cubeBack: d,\n      cubeTopBackgroundUrl: null,\n      cubeBottomBackgroundUrl: null,\n      cubeLeftBackgroundUrl: null,\n      cubeRightBackgroundUrl: null,\n      cubeFrontBackgroundUrl: null,\n      cubeBackBackgroundUrl: null\n    };\n    this.resetElapsedTime = this.resetElapsedTime.bind(this);\n    this.getElapsedTime = this.getElapsedTime.bind(this);\n    this.getBackgroundUrl = this.getBackgroundUrl.bind(this);\n    this.setBackgroundUrl = this.setBackgroundUrl.bind(this);\n    this.getRandomSide = this.getRandomSide.bind(this);\n    this.getRandomLogo = this.getRandomLogo.bind(this);\n    this.getSerializedLogo = this.getSerializedLogo.bind(this);\n    this.isLogoCollision = this.isLogoCollision.bind(this);\n    this.repaint = this.repaint.bind(this);\n  }\n\n  componentDidMount() {\n    /*\n        Note: componentDidMount() gets called a half dozen times bc the Home component\n        which instantiates this component itself mounts and unmounts multiple times.\n         we therefore delay the first repaint for a while. however\n        we also have to keep track of the repaint() threads that we invoke so that \n        we can kill them in cases where the component mounts and then quickly unmounts.\n     */\n    var self = this;\n\n    if (!this.props.logos.isLoading) {\n      /* enable render() 1 second after logos are loaded */\n      var myTimeout = setTimeout(function () {\n        self.setState({\n          shouldUpdate: true\n        });\n      }, 1000);\n      /*  the cube is initialized with the most impactful logos, so    \n          wait a while before we begin shuffling the logos. Then\n          kick off an infinite loop of repaint() */\n\n      myTimeout = setTimeout(function () {\n        self.repaint();\n      }, 5000);\n      this.setState({\n        repaintDelay: myTimeout\n      });\n      /* wait for animations to complete. */\n\n      myTimeout = setTimeout(function () {\n        self.setBackgroundUrl(\"left\", self.getSerializedLogo(self.state.featured_logos, 0));\n        self.setBackgroundUrl(\"right\", self.getSerializedLogo(self.state.featured_logos, 1));\n        self.setBackgroundUrl(\"top\", self.getSerializedLogo(self.state.featured_logos, 2));\n        self.setBackgroundUrl(\"bottom\", self.getSerializedLogo(self.state.featured_logos, 3));\n        self.setBackgroundUrl(\"front\", self.getSerializedLogo(self.state.featured_logos, 4));\n        self.setBackgroundUrl(\"back\", self.getSerializedLogo(self.state.featured_logos, 5));\n      }, 1500);\n      self.setState({\n        logosDelay: myTimeout\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    /* kill any pending repaint() invocation from componentDidMount(). */\n    clearTimeout(this.state.repaintDelay);\n    clearTimeout(this.state.logosDelay);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.state.shouldUpdate;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: \"logo-cube\",\n      className: \"d3-container mt-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, this.props.logos.isLoading || this.getElapsedTime() < 350 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-5 pt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d3-cube mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CubeSide, {\n      side: \"top\",\n      url: this.getBackgroundUrl(\"top\"),\n      classes: \"fade-in\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(CubeSide, {\n      side: \"bottom\",\n      url: this.getBackgroundUrl(\"bottom\"),\n      classes: \"fade-in\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(CubeSide, {\n      side: \"front\",\n      url: this.getBackgroundUrl(\"front\"),\n      classes: \"grow-side\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(CubeSide, {\n      side: \"back\",\n      url: this.getBackgroundUrl(\"back\"),\n      classes: \"grow-side\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(CubeSide, {\n      side: \"right\",\n      url: this.getBackgroundUrl(\"right\"),\n      classes: \"grow-side\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(CubeSide, {\n      side: \"left\",\n      url: this.getBackgroundUrl(\"left\"),\n      classes: \"grow-side\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }\n    })));\n  }\n\n  repaint() {\n    var self = this;\n    const side = self.getRandomSide();\n    const logos = side === \"front\" ? self.state.featured_logos : self.state.logos;\n    const logo = self.getRandomLogo(logos);\n    const elapsed = self.getElapsedTime(side);\n\n    if (side != null && elapsed > 3000) {\n      self.setBackgroundUrl(side, logo);\n    }\n\n    setTimeout(function () {\n      self.repaint();\n    }, 1000 * Math.random());\n  }\n\n  getBackgroundUrl(side) {\n    let retval;\n\n    switch (side) {\n      case \"top\":\n        retval = this.state.cubeTopBackgroundUrl;\n        break;\n\n      case \"bottom\":\n        retval = this.state.cubeBottomBackgroundUrl;\n        break;\n\n      case \"left\":\n        retval = this.state.cubeLeftBackgroundUrl;\n        break;\n\n      case \"right\":\n        retval = this.state.cubeRightBackgroundUrl;\n        break;\n\n      case \"front\":\n        retval = this.state.cubeFrontBackgroundUrl;\n        break;\n\n      case \"back\":\n        retval = this.state.cubeBackBackgroundUrl;\n        break;\n\n      default:\n        retval = null;\n        break;\n    }\n\n    return retval;\n  }\n\n  setBackgroundUrl(side, url) {\n    let state;\n\n    switch (side) {\n      case \"top\":\n        state = {\n          cubeTopBackgroundUrl: url\n        };\n        break;\n\n      case \"bottom\":\n        state = {\n          cubeBottomBackgroundUrl: url\n        };\n        break;\n\n      case \"left\":\n        state = {\n          cubeLeftBackgroundUrl: url\n        };\n        break;\n\n      case \"right\":\n        state = {\n          cubeRightBackgroundUrl: url\n        };\n        break;\n\n      case \"front\":\n        state = {\n          cubeFrontBackgroundUrl: url\n        };\n        break;\n\n      case \"back\":\n        state = {\n          cubeBackBackgroundUrl: url\n        };\n        break;\n\n      default:\n        state = {};\n        break;\n    }\n\n    this.setState(state, () => {\n      this.resetElapsedTime(side);\n    });\n  }\n\n  resetElapsedTime(side) {\n    const d = new Date();\n    let state;\n\n    switch (side) {\n      case \"top\":\n        state = {\n          cubeTop: d\n        };\n        break;\n\n      case \"bottom\":\n        state = {\n          cubeBottom: d\n        };\n        break;\n\n      case \"left\":\n        state = {\n          cubeLeft: d\n        };\n        break;\n\n      case \"right\":\n        state = {\n          cubeRight: d\n        };\n        break;\n\n      case \"front\":\n        state = {\n          cubeFront: d\n        };\n        break;\n\n      case \"back\":\n        state = {\n          cubeBack: d\n        };\n        break;\n\n      default:\n        state = {};\n        break;\n    }\n\n    this.setState(state);\n  }\n\n  getElapsedTime(side) {\n    const d = new Date();\n\n    switch (side) {\n      case \"top\":\n        return d - this.state.cubeTop;\n\n      case \"bottom\":\n        return d - this.state.cubeBottom;\n\n      case \"left\":\n        return d - this.state.cubeLeft;\n\n      case \"right\":\n        return d - this.state.cubeRight;\n\n      case \"front\":\n        return d - this.state.cubeFront;\n\n      case \"back\":\n        return d - this.state.cubeBack;\n\n      default:\n        return d - this.state.constructed;\n    }\n  }\n\n  getSerializedLogo(logos, i) {\n    if (i < logos.length) {\n      return logos[i];\n    }\n  }\n\n  isLogoCollision(logo) {\n    switch (logo) {\n      case this.state.cubeTopBackgroundUrl:\n      case this.state.cubeBottomBackgroundUrl:\n      case this.state.cubeBackBackgroundUrl:\n      case this.state.cubeFrontBackgroundUrl:\n      case this.state.cubeLeftBackgroundUrl:\n      case this.state.cubeRightBackgroundUrl:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  getRandomLogo(logos) {\n    var logo,\n        i = 0;\n\n    do {\n      logo = logos[Math.floor(Math.random() * logos.length)];\n      i++;\n    } while (this.isLogoCollision(logo) && i <= logos.length);\n\n    return logo;\n  }\n\n  getRandomSide() {\n    const side = Math.floor(Math.random() * 6);\n\n    switch (side) {\n      case 0:\n        return \"top\";\n\n      case 1:\n        return \"bottom\";\n\n      case 2:\n        return \"left\";\n\n      case 3:\n        return \"right\";\n\n      case 4:\n        return \"front\";\n\n      case 5:\n        return \"back\";\n\n      default:\n        return null;\n    }\n  }\n\n}\n\nexport default LogoCube;\n\nconst CubeSide = props => {\n  const clsId = \"d3-side \" + props.side + \" \" + props.classes;\n  const divId = \"cube-\" + props.side + \"-logo\";\n  const divStyle = {\n    backgroundImage: \"url('\" + props.url + \"')\"\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    key: divId,\n    className: clsId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"logo\",\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 21\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/mcdaniel/github/lpm0073/lawrencemcdaniel.com/site/src/components/logoCube/Component.js"],"names":["React","Component","wpGetFeaturedImage","Loading","LogoCube","constructor","props","d","Date","logos","items","map","post","indx","featured_logos","filter","i","categories","length","featuredPost","state","repaintDelay","logosDelay","shouldUpdate","constructed","cubeTop","cubeBottom","cubeLeft","cubeRight","cubeFront","cubeBack","cubeTopBackgroundUrl","cubeBottomBackgroundUrl","cubeLeftBackgroundUrl","cubeRightBackgroundUrl","cubeFrontBackgroundUrl","cubeBackBackgroundUrl","resetElapsedTime","bind","getElapsedTime","getBackgroundUrl","setBackgroundUrl","getRandomSide","getRandomLogo","getSerializedLogo","isLogoCollision","repaint","componentDidMount","self","isLoading","myTimeout","setTimeout","setState","componentWillUnmount","clearTimeout","shouldComponentUpdate","nextProps","nextState","render","side","logo","elapsed","Math","random","retval","url","floor","CubeSide","clsId","classes","divId","divStyle","backgroundImage"],"mappings":"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","sourcesContent":["/*\n    https://www.smashingmagazine.com/2018/02/react-d3-ecosystem/\n */\nimport React, { Component } from 'react';\nimport { wpGetFeaturedImage } from '../../shared/wpGetFeaturedImage';\nimport './styles.css';\nimport Loading from '../Loading';\n\n\nclass LogoCube extends Component {\n\n    constructor(props) {\n        super(props);\n\n        /*\n            Note: one ugly side effect of the randomness in choosing which side to update, and\n            the time at which to update is that, sometimes, the same panel gets chosen very quickly\n            which leads to jerky-looking behavior.\n\n            To prevent this we keep track of how long each logo has been on a given cube side.\n            the repaint() method will only repaint a side if that side has been in the same state \n            for at least X milliseconds.\n         */\n        var d = new Date();\n\n        const logos =  this.props.logos.items.map((post, indx) => {\n            return wpGetFeaturedImage(post, null);\n        });\n\n        const featured_logos =  this.props.logos.items.filter((post, indx) => {\n            for (var i=0 ; i < post.categories.length ; i++) {\n                if (post.categories[i] === 48) {  /* featured technology */\n                    return true;\n                }\n            }\n            return false;\n        }).map((featuredPost, indx) => {\n            return wpGetFeaturedImage(featuredPost, null);\n        });\n\n        this.state = {\n            logos: logos,\n            featured_logos: featured_logos,\n            repaintDelay: null,\n            logosDelay: null,\n            shouldUpdate: false,\n            constructed: d,\n            cubeTop: d,\n            cubeBottom: d,\n            cubeLeft: d,\n            cubeRight: d,\n            cubeFront: d,\n            cubeBack: d,\n\n            cubeTopBackgroundUrl: null,\n            cubeBottomBackgroundUrl: null,\n            cubeLeftBackgroundUrl: null,\n            cubeRightBackgroundUrl: null,\n            cubeFrontBackgroundUrl: null,\n            cubeBackBackgroundUrl: null\n          };\n\n        this.resetElapsedTime = this.resetElapsedTime.bind(this);\n        this.getElapsedTime = this.getElapsedTime.bind(this);\n        this.getBackgroundUrl = this.getBackgroundUrl.bind(this);\n        this.setBackgroundUrl = this.setBackgroundUrl.bind(this);\n        this.getRandomSide = this.getRandomSide.bind(this);\n        this.getRandomLogo = this.getRandomLogo.bind(this);\n        this.getSerializedLogo = this.getSerializedLogo.bind(this);\n        this.isLogoCollision = this.isLogoCollision.bind(this);\n    \n        this.repaint = this.repaint.bind(this);\n        }\n\n\n    componentDidMount() {\n        /*\n            Note: componentDidMount() gets called a half dozen times bc the Home component\n            which instantiates this component itself mounts and unmounts multiple times.\n\n            we therefore delay the first repaint for a while. however\n            we also have to keep track of the repaint() threads that we invoke so that \n            we can kill them in cases where the component mounts and then quickly unmounts.\n         */\n        var self = this;\n        if (!this.props.logos.isLoading) {\n\n            /* enable render() 1 second after logos are loaded */\n            var myTimeout = setTimeout(function() {\n                self.setState({shouldUpdate: true});\n            }, 1000);    \n\n            /*  the cube is initialized with the most impactful logos, so    \n                wait a while before we begin shuffling the logos. Then\n                kick off an infinite loop of repaint() */\n            myTimeout = setTimeout(function() {\n                self.repaint();\n            }, 5000);    \n            this.setState({repaintDelay: myTimeout});\n\n            /* wait for animations to complete. */\n            myTimeout = setTimeout(function() {\n                self.setBackgroundUrl(\"left\", self.getSerializedLogo(self.state.featured_logos, 0));                \n                self.setBackgroundUrl(\"right\", self.getSerializedLogo(self.state.featured_logos, 1));                \n                self.setBackgroundUrl(\"top\", self.getSerializedLogo(self.state.featured_logos, 2));\n                self.setBackgroundUrl(\"bottom\", self.getSerializedLogo(self.state.featured_logos, 3));                \n                self.setBackgroundUrl(\"front\", self.getSerializedLogo(self.state.featured_logos, 4));                \n                self.setBackgroundUrl(\"back\", self.getSerializedLogo(self.state.featured_logos, 5));\n            }, 1500);\n            self.setState({logosDelay: myTimeout});\n        }   \n\n    }\n\n    componentWillUnmount() {\n        /* kill any pending repaint() invocation from componentDidMount(). */\n        clearTimeout(this.state.repaintDelay);\n        clearTimeout(this.state.logosDelay);\n    }\n    \n    shouldComponentUpdate(nextProps, nextState) {\n        return this.state.shouldUpdate;\n    }\n\n    render() {\n\n        return(\n            <div key=\"logo-cube\" className=\"d3-container mt-0\">\n            {(this.props.logos.isLoading || this.getElapsedTime() < 350) ? (\n                <div className=\"mt-5 pt-5\">\n                    <Loading />\n                </div>\n              ) : (\n                <div className=\"d3-cube mt-5\">\n                    <CubeSide side=\"top\" url={this.getBackgroundUrl(\"top\")} classes=\"fade-in\" />\n                    <CubeSide side=\"bottom\" url={this.getBackgroundUrl(\"bottom\")} classes=\"fade-in\" />\n                    <CubeSide side=\"front\" url={this.getBackgroundUrl(\"front\")} classes=\"grow-side\"/>\n                    <CubeSide side=\"back\" url={this.getBackgroundUrl(\"back\")} classes=\"grow-side\" />\n                    <CubeSide side=\"right\" url={this.getBackgroundUrl(\"right\")} classes=\"grow-side\" />\n                    <CubeSide side=\"left\" url={this.getBackgroundUrl(\"left\")} classes=\"grow-side\" />\n                </div>\n              )}\n            </div>\n        );\n    }\n\n    repaint() {\n        var self = this;\n\n        const side = self.getRandomSide();\n        const logos = (side === \"front\") ? self.state.featured_logos: self.state.logos;\n        const logo = self.getRandomLogo(logos);\n        const elapsed = self.getElapsedTime(side);\n        if (side != null && elapsed > 3000) {\n            self.setBackgroundUrl(side, logo);\n        }\n    \n        setTimeout(function() {\n            self.repaint();\n        }, 1000 * Math.random());   \n      \n    }\n\n\n    getBackgroundUrl(side) {\n        let retval;\n        switch(side) {\n            case \"top\": retval = this.state.cubeTopBackgroundUrl; break;\n            case \"bottom\": retval =  this.state.cubeBottomBackgroundUrl; break;\n            case \"left\": retval =  this.state.cubeLeftBackgroundUrl; break;\n            case \"right\": retval =  this.state.cubeRightBackgroundUrl; break;\n            case \"front\": retval =  this.state.cubeFrontBackgroundUrl; break;\n            case \"back\": retval =  this.state.cubeBackBackgroundUrl; break;\n            default: retval = null; break;\n        }\n        return retval;\n    }\n\n    setBackgroundUrl(side, url) {\n\n        let state;\n        switch(side) {\n            case \"top\": state = {cubeTopBackgroundUrl: url}; break;\n            case \"bottom\": state = {cubeBottomBackgroundUrl: url}; break;\n            case \"left\": state = {cubeLeftBackgroundUrl: url}; break;\n            case \"right\": state = {cubeRightBackgroundUrl: url}; break;\n            case \"front\": state = {cubeFrontBackgroundUrl: url}; break;\n            case \"back\": state = {cubeBackBackgroundUrl: url}; break;\n            default: state = {}; break;\n        }\n        this.setState(state, () => {\n            this.resetElapsedTime(side);\n        });\n\n    }\n\n    resetElapsedTime(side) {\n        const d = new Date();\n        let state;\n        switch(side) {\n            case \"top\": state = {cubeTop: d}; break;\n            case \"bottom\": state = {cubeBottom: d}; break;\n            case \"left\":state = {cubeLeft: d}; break;\n            case \"right\": state = {cubeRight: d}; break;\n            case \"front\": state = {cubeFront: d}; break;\n            case \"back\": state = {cubeBack: d}; break;\n            default: state = {}; break;\n        }\n        this.setState(state);\n\n    }\n\n    getElapsedTime(side) {\n        const d = new Date();\n        switch(side) {\n            case \"top\": return d - this.state.cubeTop;\n            case \"bottom\": return d - this.state.cubeBottom;\n            case \"left\": return d - this.state.cubeLeft;\n            case \"right\": return d - this.state.cubeRight;\n            case \"front\": return d - this.state.cubeFront;\n            case \"back\": return d - this.state.cubeBack;\n            default: return d - this.state.constructed;\n        }\n    }\n      \n    getSerializedLogo(logos, i) {\n        if (i < logos.length) {\n            return logos[i];\n        }\n    }\n    isLogoCollision(logo) {\n\n        switch (logo) {\n            case this.state.cubeTopBackgroundUrl:\n            case this.state.cubeBottomBackgroundUrl:\n            case this.state.cubeBackBackgroundUrl:\n            case this.state.cubeFrontBackgroundUrl:\n            case this.state.cubeLeftBackgroundUrl:\n            case this.state.cubeRightBackgroundUrl:\n                return true;\n            default:\n                return false;\n        }\n\n    }\n    getRandomLogo(logos) {\n        var logo, i = 0;\n        do {\n            logo = logos[Math.floor(Math.random() * logos.length)];\n            i++;\n        } while (this.isLogoCollision(logo) && (i <= logos.length))\n        return logo;\n    }\n\n    \n    getRandomSide() {\n\n        const side = Math.floor(Math.random() * 6);\n        switch(side) {\n            case 0: return \"top\";\n            case 1: return \"bottom\";\n            case 2: return \"left\";\n            case 3: return \"right\";\n            case 4: return \"front\";\n            case 5: return \"back\";\n            default: return null;\n        }\n    \n    }\n    \n}\n\nexport default LogoCube;\n\nconst CubeSide = (props) => {\n\n    const clsId = \"d3-side \" + props.side + \" \" + props.classes;\n    const divId = \"cube-\" + props.side + \"-logo\";\n    const divStyle = {\n        backgroundImage: \"url('\" + props.url + \"')\"\n      }\n\n    return(\n        <React.Fragment >\n            <div key={divId}  \n                 className={clsId}>\n                <div>\n                    <div className=\"logo\" \n                        style={divStyle}>\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}"]},"metadata":{},"sourceType":"module"}