{"ast":null,"code":"const drawCircle = ref => {\n  let canvas = ref.current;\n  let context = canvas.getContext('2d');\n  let ratio = getPixelRatio(context);\n  let width = getComputedStyle(canvas).getPropertyValue('width').slice(0, -2);\n  let height = getComputedStyle(canvas).getPropertyValue('height').slice(0, -2);\n  canvas.width = width * ratio;\n  canvas.height = height * ratio;\n  canvas.style.width = `${width}px`;\n  canvas.style.height = `${height}px`;\n  context.lineWidth = 10;\n  context.strokeStyle = '#555';\n  context.shadowOffsetX = 0;\n  context.shadowOffsetY = 0;\n  context.shadowBlur = 0;\n  context.shadowColor = '#656565';\n  var x = canvas.width / 2;\n  var y = canvas.height / 2;\n  var radius = x - context.lineWidth;\n  var endPercent = 100;\n  var circ = Math.PI * 2;\n  var quart = Math.PI / 2;\n  var i = 0;\n  let requestId;\n\n  const render = current => {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.beginPath();\n    context.arc(x, y, radius, -quart, circ * current - quart, false);\n    context.stroke();\n    i += 2;\n\n    if (i <= endPercent) {\n      requestId = requestAnimationFrame(function () {\n        render(i / 100);\n      });\n    }\n  };\n\n  setTimeout(function () {\n    render();\n  }, Math.random() * 300);\n  return () => {\n    cancelAnimationFrame(requestId);\n  };\n};\n\nexport default drawCircle;","map":{"version":3,"sources":["/Users/mcdaniel/github/lpm0073/lawrencemcdaniel.com/site/src/pages/skills/drawCircle.js"],"names":["drawCircle","ref","canvas","current","context","getContext","ratio","getPixelRatio","width","getComputedStyle","getPropertyValue","slice","height","style","lineWidth","strokeStyle","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","x","y","radius","endPercent","circ","Math","PI","quart","i","requestId","render","clearRect","beginPath","arc","stroke","requestAnimationFrame","setTimeout","random","cancelAnimationFrame"],"mappings":"AAEA,MAAMA,UAAU,GAAIC,GAAD,IAAS;AACxB,MAAIC,MAAM,GAAGD,GAAG,CAACE,OAAjB;AACA,MAAIC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAd;AAEA,MAAIC,KAAK,GAAGC,aAAa,CAACH,OAAD,CAAzB;AACA,MAAII,KAAK,GAAGC,gBAAgB,CAACP,MAAD,CAAhB,CAAyBQ,gBAAzB,CAA0C,OAA1C,EAAmDC,KAAnD,CAAyD,CAAzD,EAA4D,CAAC,CAA7D,CAAZ;AACA,MAAIC,MAAM,GAAGH,gBAAgB,CAACP,MAAD,CAAhB,CAAyBQ,gBAAzB,CAA0C,QAA1C,EAAoDC,KAApD,CAA0D,CAA1D,EAA6D,CAAC,CAA9D,CAAb;AAEAT,EAAAA,MAAM,CAACM,KAAP,GAAeA,KAAK,GAAGF,KAAvB;AACAJ,EAAAA,MAAM,CAACU,MAAP,GAAgBA,MAAM,GAAGN,KAAzB;AACAJ,EAAAA,MAAM,CAACW,KAAP,CAAaL,KAAb,GAAsB,GAAEA,KAAM,IAA9B;AACAN,EAAAA,MAAM,CAACW,KAAP,CAAaD,MAAb,GAAuB,GAAEA,MAAO,IAAhC;AAEAR,EAAAA,OAAO,CAACU,SAAR,GAAoB,EAApB;AACAV,EAAAA,OAAO,CAACW,WAAR,GAAsB,MAAtB;AACAX,EAAAA,OAAO,CAACY,aAAR,GAAwB,CAAxB;AACAZ,EAAAA,OAAO,CAACa,aAAR,GAAwB,CAAxB;AACAb,EAAAA,OAAO,CAACc,UAAR,GAAqB,CAArB;AACAd,EAAAA,OAAO,CAACe,WAAR,GAAsB,SAAtB;AAGA,MAAIC,CAAC,GAAGlB,MAAM,CAACM,KAAP,GAAe,CAAvB;AACA,MAAIa,CAAC,GAAGnB,MAAM,CAACU,MAAP,GAAgB,CAAxB;AACA,MAAIU,MAAM,GAAGF,CAAC,GAAGhB,OAAO,CAACU,SAAzB;AACA,MAAIS,UAAU,GAAG,GAAjB;AACA,MAAIC,IAAI,GAAGC,IAAI,CAACC,EAAL,GAAU,CAArB;AACA,MAAIC,KAAK,GAAGF,IAAI,CAACC,EAAL,GAAU,CAAtB;AACA,MAAIE,CAAC,GAAG,CAAR;AACA,MAAIC,SAAJ;;AAEA,QAAMC,MAAM,GAAI3B,OAAD,IAAa;AAExBC,IAAAA,OAAO,CAAC2B,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwB7B,MAAM,CAACM,KAA/B,EAAsCN,MAAM,CAACU,MAA7C;AACAR,IAAAA,OAAO,CAAC4B,SAAR;AACA5B,IAAAA,OAAO,CAAC6B,GAAR,CAAYb,CAAZ,EAAeC,CAAf,EAAkBC,MAAlB,EAA0B,CAAEK,KAA5B,EAAqCH,IAAI,GAAGrB,OAAR,GAAmBwB,KAAvD,EAA8D,KAA9D;AACAvB,IAAAA,OAAO,CAAC8B,MAAR;AACAN,IAAAA,CAAC,IAAG,CAAJ;;AAEA,QAAIA,CAAC,IAAIL,UAAT,EAAqB;AACjBM,MAAAA,SAAS,GAAGM,qBAAqB,CAAC,YAAY;AAC1CL,QAAAA,MAAM,CAACF,CAAC,GAAG,GAAL,CAAN;AACH,OAFgC,CAAjC;AAGH;AAEJ,GAdD;;AAgBAQ,EAAAA,UAAU,CAAC,YAAW;AAClBN,IAAAA,MAAM;AACT,GAFS,EAEPL,IAAI,CAACY,MAAL,KAAgB,GAFT,CAAV;AAKA,SAAO,MAAM;AACTC,IAAAA,oBAAoB,CAACT,SAAD,CAApB;AACH,GAFD;AAIH,CAvDD;;AAyDA,eAAe7B,UAAf","sourcesContent":["\n\nconst drawCircle = (ref) => {\n    let canvas = ref.current;\n    let context = canvas.getContext('2d');\n    \n    let ratio = getPixelRatio(context);\n    let width = getComputedStyle(canvas).getPropertyValue('width').slice(0, -2);\n    let height = getComputedStyle(canvas).getPropertyValue('height').slice(0, -2);\n            \n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    context.lineWidth = 10;\n    context.strokeStyle = '#555';\n    context.shadowOffsetX = 0;\n    context.shadowOffsetY = 0;\n    context.shadowBlur = 0;\n    context.shadowColor = '#656565';\n    \n\n    var x = canvas.width / 2;\n    var y = canvas.height / 2;\n    var radius = x - context.lineWidth;\n    var endPercent = 100;\n    var circ = Math.PI * 2;\n    var quart = Math.PI / 2;\n    var i = 0;\n    let requestId;\n\n    const render = (current) => {\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        context.beginPath();\n        context.arc(x, y, radius, -(quart), (circ * current) - quart, false);\n        context.stroke();\n        i +=2;\n    \n        if (i <= endPercent) {\n            requestId = requestAnimationFrame(function () {\n                render(i / 100)\n            });\n        }\n    \n    };\n\n    setTimeout(function() { \n        render(); \n    }, Math.random() * 300);\n    \n\n    return () => {\n        cancelAnimationFrame(requestId);\n    };\n\n};\n\nexport default drawCircle;"]},"metadata":{},"sourceType":"module"}