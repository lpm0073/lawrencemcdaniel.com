{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl, backendUrl } from '../shared/urls';\n/* ----------------------------------- */\n\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('Post comments ', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\n/* ----------------------------------- */\n\nexport const fetchSpecialties = () => dispatch => {\n  dispatch(specialtiesLoading(true));\n  return fetch(backendUrl + \"posts?categories=43&_embed\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promotions => dispatch(addSpecialties(promotions))).catch(error => dispatch(specialtiesFailed(error.message)));\n};\nexport const specialtiesLoading = () => ({\n  type: ActionTypes.SPECIALTIES_LOADING\n});\nexport const specialtiesFailed = errmess => ({\n  type: ActionTypes.SPECIALTIES_FAILED,\n  payload: errmess\n});\nexport const addSpecialties = promos => ({\n  type: ActionTypes.ADD_SPECIALTIES,\n  payload: promos\n});\n/* ----------------------------------- */\n\nexport const fetchPortfolio = () => dispatch => {\n  dispatch(portfolioLoading(true));\n  return fetch(backendUrl + \"?????????????????????????????\").then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(portfolio => dispatch(addPortfolio(portfolio))).catch(error => dispatch(portfolioFailed(error.message)));\n};\nexport const portfolioLoading = () => ({\n  type: ActionTypes.PORTFOLIO_LOADING\n});\nexport const portfolioFailed = errmess => ({\n  type: ActionTypes.PORTFOLIO_FAILED,\n  payload: errmess\n});\nexport const addPortfolio = portfolio => ({\n  type: ActionTypes.ADD_PORTFOLIO,\n  payload: portfolio\n});\n/* ----------------------------------- */\n\nexport const postFeedback = (firstname, lastname, telnum, email, agree, message) => dispatch => {\n  const newFeedback = {\n    firstname: firstname,\n    lastname: lastname,\n    telnum: telnum,\n    email: email,\n    agree: agree,\n    message: message\n  };\n  newFeedback.date = new Date().toISOString();\n  return fetch(baseUrl + 'feedback', {\n    method: 'POST',\n    body: JSON.stringify(newFeedback),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => {\n    alert('Feedback added: ' + response);\n  }).catch(error => {\n    console.log('Post feedback ', error.message);\n    alert('Your feedback could not be posted\\nError: ' + error.message);\n  });\n};\nexport const addFeedback = feedback => ({\n  type: ActionTypes.ADD_FEEDBACK,\n  payload: feedback\n});\nexport const feedbackFailed = errmess => ({\n  type: ActionTypes.FEEDBACK_FAILED,\n  payload: errmess\n});","map":{"version":3,"sources":["/Users/mcdaniel/github/lpm0073/lawrencemcdaniel.com/site/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","backendUrl","fetchComments","dispatch","fetch","then","response","ok","error","Error","status","statusText","errmess","message","json","comments","addComments","catch","commentsFailed","type","COMMENTS_FAILED","payload","ADD_COMMENTS","addComment","comment","ADD_COMMENT","postComment","dishId","rating","author","newComment","date","Date","toISOString","method","body","JSON","stringify","headers","credentials","console","log","alert","fetchSpecialties","specialtiesLoading","promotions","addSpecialties","specialtiesFailed","SPECIALTIES_LOADING","SPECIALTIES_FAILED","promos","ADD_SPECIALTIES","fetchPortfolio","portfolioLoading","portfolio","addPortfolio","portfolioFailed","PORTFOLIO_LOADING","PORTFOLIO_FAILED","ADD_PORTFOLIO","postFeedback","firstname","lastname","telnum","email","agree","newFeedback","addFeedback","feedback","ADD_FEEDBACK","feedbackFailed","FEEDBACK_FAILED"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport { baseUrl, backendUrl } from '../shared/urls';\n\n\n\n/* ----------------------------------- */\nexport const fetchComments = () => (dispatch) => {\n\n    return fetch(baseUrl + 'comments')\n    .then(\n        response => {\n            if (response.ok) {\n                return response;\n            } else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n    \n}\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\n\nexport const addComment = (comment) => ({\n    type: ActionTypes.ADD_COMMENT,\n    payload: comment\n});\n\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\n\n        const newComment = {\n            dishId: dishId,\n            rating: rating,\n            author: author,\n            comment: comment\n        }\n        newComment.date = new Date().toISOString();\n\n        return fetch(baseUrl + 'comments', {\n            method: 'POST',\n            body: JSON.stringify(newComment),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            credentials: 'same-origin'\n        })\n        .then(\n            response => {\n                if (response.ok) {\n                    return response;\n                } else {\n                    var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                    error.response = response;\n                    throw error;\n                }\n            },\n            error => {\n                var errmess = new Error(error.message);\n                throw errmess;\n            }\n\n        )\n        .then(response => response.json())\n        .then(response => dispatch(addComment(response)))\n        .catch(error => { \n            console.log('Post comments ', error.message);\n            alert('Your comment could not be posted\\nError: ' + error.message);\n        });\n    \n}\n/* ----------------------------------- */\n\nexport const fetchSpecialties = () => (dispatch) => {\n    dispatch(specialtiesLoading(true));\n\n    return fetch(backendUrl + \"posts?categories=43&_embed\")\n    .then(\n        response => {\n            if (response.ok) {\n                return response;\n            } else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n    .then(response => response.json())\n    .then(promotions => dispatch(addSpecialties(promotions)))\n    .catch(error => dispatch(specialtiesFailed(error.message)));\n\n}\n\nexport const specialtiesLoading = () => ({\n    type: ActionTypes.SPECIALTIES_LOADING\n});\n\nexport const specialtiesFailed = (errmess) => ({\n    type: ActionTypes.SPECIALTIES_FAILED,\n    payload: errmess\n});\n\nexport const addSpecialties = (promos) => ({\n    type: ActionTypes.ADD_SPECIALTIES,\n    payload: promos\n});\n\n/* ----------------------------------- */\nexport const fetchPortfolio = () => (dispatch) => {\n    dispatch(portfolioLoading(true));\n\n    return fetch(backendUrl + \"?????????????????????????????\")\n    .then(\n        response => {\n            if (response.ok) {\n                return response;\n            } else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        })\n    .then(response => response.json())\n    .then(portfolio => dispatch(addPortfolio(portfolio)))\n    .catch(error => dispatch(portfolioFailed(error.message)));\n\n}\n\nexport const portfolioLoading = () => ({\n    type: ActionTypes.PORTFOLIO_LOADING\n});\n\nexport const portfolioFailed = (errmess) => ({\n    type: ActionTypes.PORTFOLIO_FAILED,\n    payload: errmess\n});\n\nexport const addPortfolio = (portfolio) => ({\n    type: ActionTypes.ADD_PORTFOLIO,\n    payload: portfolio\n});\n\n\n\n\n/* ----------------------------------- */\n\n\nexport const postFeedback = (firstname, lastname, telnum, email, agree, message) => (dispatch) => {\n\n    const newFeedback = {\n        firstname: firstname,\n        lastname: lastname,\n        telnum: telnum,\n        email: email,\n        agree: agree,\n        message: message\n    }\n    newFeedback.date = new Date().toISOString();\n\n    return fetch(baseUrl + 'feedback', {\n        method: 'POST',\n        body: JSON.stringify(newFeedback),\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n    })\n    .then(\n        response => {\n            if (response.ok) {\n                return response;\n            } else {\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\n                error.response = response;\n                throw error;\n            }\n        },\n        error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n        }\n\n    )\n    .then(response => response.json())\n    .then(response => {\n        alert('Feedback added: ' + response);\n    })\n    .catch(error => { \n        console.log('Post feedback ', error.message);\n        alert('Your feedback could not be posted\\nError: ' + error.message);\n    });\n\n}\n\nexport const addFeedback = (feedback) => ({\n    type: ActionTypes.ADD_FEEDBACK,\n    payload: feedback\n});\n\nexport const feedbackFailed = (errmess) => ({\n    type: ActionTypes.FEEDBACK_FAILED,\n    payload: errmess\n});\n"]},"metadata":{},"sourceType":"module"}